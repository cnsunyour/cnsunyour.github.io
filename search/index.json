[{"content":"群友提到一个包 git-messenger ，以 popup 方式显示当前行的 git commit 信息，用了下还挺方便的。如下图： 不过这个包似乎很长时间没维护了，用起来有几个问题：\n没有过滤带有 gpg 签名的信息，影响观感 show-parent 只能显示简单信息，不能显示详细信息 在切换到其它 repo 后，再调用此包，直接会报错。 于是 fork 了一份，进行了下修复，同时向原 repo 提交了 pr 。不知原作者能否看到合并，大家也可以下载我 forked 的版本 git-messenger\n","date":"2023-12-24T00:00:00Z","permalink":"https://sunyour.org/post/git-messenger-%E6%98%BE%E7%A4%BA-git-commit-%E4%BF%A1%E6%81%AF/","title":"git-messenger ：显示 git commit 信息"},{"content":"我的日志是通过 ox-hugo 从 org 文件中导出的，然后使用 hugo 生成最终内容后部署到线上。\nhugo 目录本身是放在私有仓库里，另外建了一个公开仓库专门放 gh-pages 站点，为此还专门写了一个部署脚本：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/env bash # If a command fails then the deploy stops set -e printf \u0026#34;\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\u0026#34; cd ~/hugo if [ -e \u0026#34;public\u0026#34; ]; then rm -rf public fi git clone -b gh-pages git@github.com:cnsunyour/cnsunyour.github.io.git public hugo --gc --minify cd public git add . msg=\u0026#34;rebuilding site $(date)\u0026#34; if [ -n \u0026#34;$*\u0026#34; ]; then msg=\u0026#34;$*\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; git push -u origin gh-pages rm -rf public 用起来也还好，但是每次都要手动执行一次总是不太方便，而且 ~/hugo 目录也是用 git 做版本管理的，利用 github 的 action 功能进行自动发布岂不是更好？\n找了一圈，发现两个比较好用的 github actions ，可以直接借用，配置写起来要简单的多。\nactions-hugo 安装、配置 hugo actions-gh-pages 发布 gh-pages 页面 建立配置文件 .github/workflows/hugo.yaml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: - master - main pull_request: # Allows you to run this workflow manually from the Actions tab workflow_dispatch: jobs: # Deployment job deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.DEPLOY_PRIVATE_KEY }} external_repository: cnsunyour/cnsunyour.github.io publish_branch: gh-pages publish_dir: ./public cname: sunyour.org actions-hugo 的一个特点是可以安装最新版的 hugo ，而不用设置具体的版本号，对于我这个更新强迫症非常友好。\nactions-gh-pages 的功能比较多，可以向本仓库或其它仓库，或者其它网站框架进行发布，具体可以看仓库上的示例。我这里用到的是发布在另一个仓库的配置，并且用 cname 参数指定了 gh-pages 用的自定义域名。\n在 gh-pages 所在仓库配置好 pages 相关设置后。就可以在对私有仓库 push 的同时自动向 gh-pages 仓库发布生成新的站点内容了。\n","date":"2023-12-24T00:00:00Z","permalink":"https://sunyour.org/post/%E5%9C%A8-github-%E4%B8%8A%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83-hugo-%E7%94%9F%E6%88%90%E7%9A%84%E5%86%85%E5%AE%B9/","title":"在 Github 上自动发布 hugo 生成的内容"},{"content":"事业崩塌，疫情爆发，赋闲在家，一晃竟是三年多过去了。发现 blog 也停了三年多，果然是不能犯懒的。\n之前用的主题是 even ，一直对 ox-hugo 生成的文章有兼容性问题，提了 pr 也一直没人处理，似乎是不维护了。\n顺便换个主题，最终选定的是 stack ，最主要是支持自动 light/drak 模式，界面也比较清爽，比较符合多数程序员的调调，就它了。\n","date":"2023-12-21T00:00:00Z","permalink":"https://sunyour.org/post/%E4%B8%80%E6%99%83%E5%B0%B1%E6%98%AF%E4%B8%89%E5%B9%B4%E5%A4%9A/","title":"一晃就是三年多"},{"content":"之前一直是使用 theme-changer 来根据日出日落时间自动切换 emacs 的主题的。但是有一个问题，因为 macOS 并不是完全按照计算出的日出日落时间去切换 light/dark 模式的，因此 emacs 的主题切换时间与 macOS 系统不同步。\n我自己试了增加一个延时参数去尽量与系统切换时间保持接近，但几个月下来发现完全找不到一个相对合适的延迟时间， macOS 并不是固定给日出日落时间加一个延时，具体是什么逻辑到现在还没摸索出来。\n如果能够读取 macOS 当前的 light/dark 模式就好了，这样就可以读取到的这个值自动切换主题了。\n去 github 搜索了一下，竟然真的有人写了一个包，就是这个 https://github.com/LionyxML/auto-dark-emacs 。试用了一下，发现切换起来有问题，不能做到完全切换，还会遗留一些地方没切换成。于是我 fork 了一份，并进行了如下修改：\n修复了切换过程中的 bug ； 增加了可以设置为从主题列表中随机切换的功能，跟我以前的习惯一致； 优化了执行逻辑，大量减少循环次数，提升性能。 我 fork 的仓库地址在 https://github.com/cnsunyour/auto-dark-emacs ， use-package 调用方法如下：\n1 2 3 4 5 6 7 8 9 10 11 (use-package auto-dark-emacs :straight (auto-dark-emacs :type git :host github :repo \u0026#34;cnsunyour/auto-dark-emacs\u0026#34;) :when (eq system-type \u0026#39;darwin) :custom (auto-dark-emacs/light-theme +list-light-themes) (auto-dark-emacs/dark-theme +list-dark-themes) :config \u0026#39;auto-dark-emacs/check-and-set-dark-mode) 我用的是 doom-emacs ，调用方法如下：\n1 2 3 4 5 6 ;; packages.el (when IS-MAC (package! auto-dark-emacs :recipe (:host github :repo \u0026#34;LionyxML/auto-dark-emacs\u0026#34; :fork \u0026#34;cnsunyour/auto-dark-emacs\u0026#34;))) 1 2 3 4 5 6 7 8 9 10 11 12 13 ;; config.el (use-package! auto-dark-emacs :when IS-MAC :custom (auto-dark-emacs/light-theme +list-light-themes) (auto-dark-emacs/dark-theme +list-dark-themes) :config (add-hook! doom-load-theme :append (when (and (featurep \u0026#39;solaire-mode) (not (string-prefix-p \u0026#34;doom-\u0026#34; (symbol-name doom-theme)))) (set-face-background \u0026#39;solaire-hl-line-face nil) (set-face-background \u0026#39;solaire-default-face nil))) (add-hook! after-init #\u0026#39;auto-dark-emacs/check-and-set-dark-mode)) ","date":"2020-05-06T00:00:00Z","permalink":"https://sunyour.org/post/%E8%AE%A9-emacs-%E5%9C%A8-macos-%E4%B8%8A%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E7%9A%84-light/dark-%E6%A8%A1%E5%BC%8F%E5%88%87%E6%8D%A2%E5%AF%B9%E5%BA%94%E4%B8%BB%E9%A2%98/","title":"让 Emacs 在 macOS 上根据系统的 light/dark 模式切换对应主题"},{"content":"　在 pyim/emacs-rime 里都有“探针/断言”函数来在特定的状态下自动切换到英文状态，省去手工切换的动作。\n但是我在使用中偶然发现在打开 Hydra 菜单的时候不能自动切换到英文模式，有点儿影响体验。我一直以为 Hydra 激活时是一个 \u0026ldquo;button\u0026rdquo; 模式，看来不是这样。\n试图搜索一下与 hydra 有关的 mode ，却一无所获，莫非 hydra 不是以一种特定 mode 的方式来实现的？查看官方文档和 google 搜索也都没有找到类似有一个单独的 mode 的描述，只是说明 defhydra 里会定义一些快捷键。但是注意到一个情况，就是 defhydra 会生成一个 keymap ，可是怎么使得这个 keymap 在需要的时候激活，不需要的时候关闭呢？\n无奈英语太烂，实在找不到更详细的信息了，只好去查看代码，终于发现一个函数 hydra-set-transient-map ，它的说明是 Set KEYMAP to the highest priority. 也就 是把需要的 hydra 的 keymap 优先级提到最高，这样其对应的快捷键就生效了，退出时再 恢复到低级。这下明白了hydra 的实现方式。可是如何判断当前把 hydra keymap 提高到最 高优先级使得快捷键生效了呢？\n只好继续看代码，在逐个搜索函数和变量的过程中，终于发现一个变量 hydra-curr-map ，其当前值是 nil ，描述是 The keymap of the current Hydra called. ，可以试一下。\n试着写一个断言函数：\n1 2 3 (defun +rime-predicate-hydra-p () (and (featurep \u0026#39;hydra) (bound-and-true-p hydra-curr-map))) 加载到 rime-disable-predicates 里试一下，果然有用。 ^_^\n找到这个的过程好费劲，各种搜索无果，在群里多次提问也没有回答，不知是这问题太基础还是大家确实都不知道，加上看到找到的这个变量，感觉应该挺容易发现才对，现在自信心挺受打击，总觉得自己绕了很多弯路。\n因此就假定也会有同学有我同样的情况吧，所以记录一下备查，也许有人用得着。\n","date":"2020-04-11T00:00:00Z","permalink":"https://sunyour.org/post/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD-emacs-%E5%BD%93%E5%89%8D%E5%A4%84%E4%BA%8E-hydra-%E6%A8%A1%E5%BC%8F/","title":"如何判断 Emacs 当前处于 Hydra 模式"},{"content":"最近比较火爆的 emacs-rime 输入法，终于可以在 emacs 里有和系统 rime 输入法一样的输入体验了。\n不过听说好多小伙伴在配置时遇到了困难，尤其是 Debian/Ubuntu 上，很多都遇到无法自动编译 module ，或编译成功了无法加载的情况。\n其原因基本都是所依赖的 librime 版本太低所致。我正好有一台 VPS ，系统是 Debian10，于是上去搜索了一下，发现 Debian10 所带的 librime 的版本才是 1.4.0 ，可见更老一些的 debian/ubuntu 上的版本会更旧（听说有 ubuntu 上的 librime 才是 1.2.0 版） ，而 emacs-rime 需要 1.5.3 版本，所以只得自行编译安装 librime 了。\nlibrime 依赖的库比较多，有的小伙伴就被卡在这里，只要把所有需要依赖的库和程序安装好就行了，用下面的命令：\n1 sudo apt install git build-essential cmake libboost-all-dev libgoogle-glog-dev libleveldb-dev libmarisa-dev libopencc-dev libyaml-cpp-dev libgtest-dev 然后下载 librime 源码编译安装：\n1 2 3 4 5 6 mkdir ~/repos cd ~/repos git clone https://github.com/rime/librime.git cd librime make sudo make install OK 了，就这么简单。\n","date":"2020-04-03T00:00:00Z","permalink":"https://sunyour.org/post/%E4%B8%BA%E5%AE%89%E8%A3%85-emacs-rime-%E8%80%8C%E5%9C%A8-debian/ubuntu-%E4%B8%AD%E7%BC%96%E8%AF%91-librime-%E7%9A%84%E6%96%B0%E7%89%88%E6%9C%AC/","title":"为安装 emacs-rime 而在 Debian/Ubuntu 中编译 librime 的新版本"},{"content":"这两天花了不少精力对 emacs-rime 优化配置和扩展功能，今天参考 pyim 的 pyim-convert-string-at-point 函数，实现了在 emacs-rime 下转换当前光标处字符串为中文的函数，并做了功能增强，针对 evil 和 emacs 两种 state 进行了分别处理。代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 (defun +rime-force-enable () \u0026#34;强制 `rime\u0026#39; 使用中文输入状态. 如果当前不是 `rime\u0026#39; 输入法，则先激活 `rime\u0026#39; 输入法。如果当前是 `evil\u0026#39; 的非编辑状态，则转为 `evil-insert-state\u0026#39;。\u0026#34; (interactive) (let ((input-method \u0026#34;rime\u0026#34;)) (unless (string= current-input-method input-method) (activate-input-method input-method)) (when (rime-predicate-evil-mode-p) (if (= (+ 1 (point)) (line-end-position)) (evil-append 1) (evil-insert 1))) (rime-force-enable))) (defun +rime-convert-string-at-point (\u0026amp;optional return-cregexp) \u0026#34;将光标前的字符串转换为中文.\u0026#34; (interactive \u0026#34;P\u0026#34;) (+rime-force-enable) (let ((string (if mark-active (buffer-substring-no-properties (region-beginning) (region-end)) (buffer-substring-no-properties (point) (max (line-beginning-position) (- (point) 80))))) code length) (cond ((string-match \u0026#34;\\\\([a-z\u0026#39;-]+\\\\|[[:punct:]]\\\\) *$\u0026#34; string) (setq code (replace-regexp-in-string \u0026#34;^[-\u0026#39;]\u0026#34; \u0026#34;\u0026#34; (match-string 0 string))) (setq length (length code)) (setq code (replace-regexp-in-string \u0026#34; +\u0026#34; \u0026#34;\u0026#34; code)) (if mark-active (delete-region (region-beginning) (region-end)) (when (\u0026gt; length 0) (delete-char (- 0 length)))) (when (\u0026gt; length 0) (setq unread-command-events (append (listify-key-sequence code) unread-command-events)))) (t (message \u0026#34;`+rime-convert-string-at-point\u0026#39; did nothing.\u0026#34;))))) ","date":"2020-03-26T00:00:00Z","permalink":"https://sunyour.org/post/%E7%BB%99-emacs-rime-%E5%A2%9E%E5%8A%A0%E7%B1%BB%E4%BC%BC-pyim-%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%BD%93%E5%89%8D%E8%8B%B1%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%BA%E4%B8%AD%E6%96%87%E7%9A%84%E5%8A%9F%E8%83%BD/","title":"给 emacs-rime 增加类似 pyim 的转换当前英文字符串为中文的功能"},{"content":"在 emacs-rime 中的断言（pyim 中称为探针）是相当实用的功能，配置的好的话可以在输入过程中做到完全自动切换中英文。\n我希望在配置中不同的 mode 中能有不同的断言，因此写了个判断函数，根据不同的 mode 计算不同的断言函数的值，然后集中返回；另外还自定义了几种自己需要的断言，如：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 (defun +rime-predicate-button-at-point-p () \u0026#34;Determines whether the point is a button. \\\u0026#34;Button\\\u0026#34; means that positon is not editable.\u0026#34; (button-at (point))) (defun +rime-predicate-beancount-p () \u0026#34;Predicate input state in `beancount-mode.\u0026#39; Determines whether current buffer\u0026#39;s `major-mode\u0026#39; is `beancount-mode\u0026#39;, and the cursor is at the beginning of the line.\u0026#34; (when (derived-mode-p \u0026#39;beancount-mode) (not (or (nth 3 (syntax-ppss)) (nth 4 (syntax-ppss)))))) (defun +rime-predicate-multi-mode-english-p() \u0026#34;Using different predicates in different modes.\u0026#34; (if (derived-mode-p \u0026#39;telega-chat-mode \u0026#39;text-mode) (rime-predicate-auto-english-p) (or (rime-predicate-after-alphabet-char-p) (rime-predicate-prog-in-code-p) (+rime-predicate-beancount-p)))) (setq rime-disable-predicates \u0026#39;(rime-predicate-evil-mode-p +rime-predicate-button-at-point-p rime-predicate-punctuation-line-begin-p +rime-predicate-multi-mode-english-p)) 从中可以看到对 `telega-chat-mode` 和 `text-mode` 两种模式使用了不同的断言逻辑，实际应用满足了我的需求。\n如果使用的 mode 很多，每种 mode 又需要不同的断言组合，那就需要对判断函数增加逻辑。可以预想，很有可能会发展成类似于\n(if 条件 1 (逻辑 1) (if 条件 2 (逻辑 2) (if 条件 3 (逻辑 3) (\u0026hellip;\u0026hellip;))))\n的形式。\n恰好这时在 Emacs China 论坛 上看到关于 buffer-local 变量的帖子，以前对 `setq-default` 和 `setq-local` 一头雾水，这次经过回帖的解释，总算明白了 buffer-local 变量的用处。\n对于我用断言的情况，不正是 buffer-local 变量的使用场景吗？把之前配置里 17 行以后的代码修改一下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 (setq-default rime-disable-predicates \u0026#39;(+rime-predicate-button-at-point-p rime-predicate-evil-mode-p rime-predicate-punctuation-line-begin-p rime-predicate-after-alphabet-char-p rime-predicate-prog-in-code-p +rime-predicate-beancount-p)) (add-hook \u0026#39;telega-chat-mode-hook (lambda() (setq-local rime-disable-predicates \u0026#39;(+rime-predicate-button-at-point-p rime-predicate-evil-mode-p rime-predicate-punctuation-line-begin-p rime-predicate-auto-english-p)))) (add-hook \u0026#39;text-mode-hook (lambda() (setq-local rime-disable-predicates \u0026#39;(+rime-predicate-button-at-point-p rime-predicate-evil-mode-p rime-predicate-punctuation-line-begin-p rime-predicate-auto-english-p)))) 也就是先用 `setq-default` 设置一个大部分 mode 都用的默认断言组合，其次对需要单独设置的 mode 用 `setq-local` 设置 buffer-local 断言组合，通过 `add-hook` 使其在进入对应 mode 时设置生效。\n这种方式配置代码行数可能会增多，但是逻辑简单，无论多少个不同需求的 mode ，只需要依此类推逐个 `setq-loca` 设置就好了，不容易出错。\n最后安利一下 `doom-emacs` ，提供了很多简化代码的宏，如上述两个 `setq-loca` 在 `doom-emacs` 里就可以写为：\n1 2 3 4 5 6 (add-hook! (telega-chat-mode text-mode) (setq-local rime-disable-predicates \u0026#39;(+rime-predicate-button-at-point-p rime-predicate-evil-mode-p rime-predicate-punctuation-line-begin-p rime-predicate-auto-english-p))) 搞定，简单吧？\n注： 最新的断言配置在 github 仓库 ，里面的逻辑稍微复杂点，谨供参考。\n","date":"2020-03-21T00:00:00Z","permalink":"https://sunyour.org/post/emacs-rime%E6%96%AD%E8%A8%80/pyim%E6%8E%A2%E9%92%88%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%BA%94%E7%94%A8%E6%96%B9%E5%BC%8F/","title":"\"emacs-rime断言/pyim探针“的两种应用方式"},{"content":"现在已经在 emacs 里使用 pyim 或 emacs-rime 等内置输入法输入中文，用内置输入法最大的优点是可以编写探针函数，从而根据不同状态自动切换中英文输入。同理，也可以在不同的 buffer 里主动激活或关闭输入法，达到接近完美的自动切换功能。\n因此在之前给 telega 写了个 advice ，把需要指定中英文的 chatbuf 写在配置文件中，可以做到进不同的频道切换自动切换中英文。但这样做有一个缺点，就是如果中英文频道信息有变化（包括群组名称变化），则需要修改配置文件后重新加载才能生效。\n嗯，用群友的话说，这很不优雅。\n于是今天抽空把配置里的中英文 chatbuf 列表进行持久化保存，并且改为保存 chatid ，避免修改名称引起的切换失效。\n代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 ;;; cnsunyour/telega/+telega-auto-input-method.el -*- lexical-binding: t; -*- (defcustom +telega--chat-cn-list nil \u0026#34;`telega\u0026#39; 里中文对话列表，用于自动切换到中文输入。\u0026#34; :type \u0026#39;list :group \u0026#39;telega) (defcustom +telega--chat-en-list nil \u0026#34;`telega\u0026#39; 里英文对话列表，用于自动切换到英文输入。\u0026#34; :type \u0026#39;list :group \u0026#39;telega) (defun +telega--save-encn-list () \u0026#34;保存中英文对话列表。\u0026#34; (customize-save-variable \u0026#39;+telega--chat-cn-list +telega--chat-cn-list) (customize-save-variable \u0026#39;+telega--chat-en-list +telega--chat-en-list)) (defun +telega--add-cn-list (chat) \u0026#34;将当前聊天对话加入到中文列表中，以自动激活中文输入法。\u0026#34; (interactive (list (or telega-chatbuf--chat telega--chat (telega-chat-at (point))))) (let ((chatid (plist-get chat :id))) (cl-pushnew chatid +telega--chat-cn-list) (setq +telega--chat-en-list (cl-remove chatid +telega--chat-en-list)) (+telega--save-encn-list) (message (concat \u0026#34;telega.el: Chat [\\\u0026#34;\u0026#34; (telega-chat-title chat) \u0026#34;\\\u0026#34;] is added to CN chat list.\u0026#34;)))) (defun +telega--add-en-list (chat) \u0026#34;将当前聊天对话加入到英文列表中，以自动关闭中文输入法。\u0026#34; (interactive (list (or telega-chatbuf--chat telega--chat (telega-chat-at (point))))) (let ((chatid (plist-get chat :id))) (cl-pushnew chatid +telega--chat-en-list) (setq +telega--chat-cn-list (cl-remove chatid +telega--chat-cn-list)) (+telega--save-encn-list) (message (concat \u0026#34;telega.el: Chat [\\\u0026#34;\u0026#34; (telega-chat-title chat) \u0026#34;\\\u0026#34;] is added to EN chat list.\u0026#34;)))) (defun +telega--remove-from-list (chat) \u0026#34;将当前聊天对话从中英文列表中删除，将根据对话名称自动切换中英文输入法。\u0026#34; (interactive (list (or telega-chatbuf--chat telega--chat (telega-chat-at (point))))) (let ((chatid (plist-get chat :id))) (setq +telega--chat-en-list (cl-remove chatid +telega--chat-en-list)) (setq +telega--chat-cn-list (cl-remove chatid +telega--chat-cn-list)) (+telega--save-encn-list) (message (concat \u0026#34;telega.el: Chat [\\\u0026#34;\u0026#34; (telega-chat-title chat) \u0026#34;\\\u0026#34;] is removed from EN/CN chat list.\u0026#34;)))) (defun +telega--active-input-method () \u0026#34;Active input method.\u0026#34; (activate-input-method default-input-method)) (defun +telega--deactive-input-method () \u0026#34;Deactive input method\u0026#34; (deactivate-input-method)) (defadvice! +toggle-input-method--telega-chat-mode-a (chat \u0026amp;optional no-history-load) \u0026#34;在 telega-chat-mode 里根据 chat 名称切换输入法，如果名称包含 中文，则激活中文输入法，否则关闭中文输入法\u0026#34; :after #\u0026#39;telega-chat--pop-to-buffer (let ((title (telega-chat-title chat)) (chatid (plist-get chat :id))) (cond ((member chatid +telega--chat-cn-list) (+telega--active-input-method)) ((member chatid +telega--chat-en-list) (+telega--deactive-input-method)) ((string-match \u0026#34;\\\\cc\u0026#34; title) (+telega--active-input-method)) ((telega-chat-bot-p chat) (+telega--deactive-input-method)) ((telega-chat-private-p chat) (+telega--active-input-method)) (t (+telega--deactive-input-method))))) ","date":"2020-03-17T00:00:00Z","permalink":"https://sunyour.org/post/%E7%BB%99-telega-%E7%9A%84%E8%81%8A%E5%A4%A9%E5%AF%B9%E8%AF%9D%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E4%B8%AD%E8%8B%B1%E6%96%87%E8%BE%93%E5%85%A5/","title":"给 telega 的聊天对话自动切换中英文输入"},{"content":"从最开始使用外置输入法到使用内置输入法 pyim ，越来越感受到内置输入法的便利，其中最让人中毒的就是通过探针函数的设置，在不同的位置或模式自动切换中英文，几乎不用手工切换，打字真如行云流水一般。\npyim 是一款非常优秀的内置输入法，是它坚定了我从外置输入法转为内置输入法的决心。但是这是一款从拼音起家的输入法，虽然早已加入了对五笔等方案的支持，但对五笔远没有像拼音方案那样进行优化，所以用起来总感觉有点儿不尽如意。\n我在系统中用的是 rime 输入法， pyim 也可以把 rime 作为后端进行调用，经过一段时间的试用，发现 pyim 对 rime 的调用不太完全，而且 pyim 用自家的缓存对 rime 取出的候选词进行干预，这样就无法保持与外置 rime 输入法的一致体验了。\n正在此时， emacs-china 上有大佬发布了一新的内置输入法 emacs-rime 。严格的说，这不是一个输入法，而是相当于是 rime 输入法在 emacs 里的一个前端，所有的输入都原封不动的发送给 rime 后端，由 rime 处理完后把数据再返回并在 emacs 里展现。\n经过几天的试用和调整，今天终于决定把输入法切换到 emacs-rime 了，理由有两点：\n几乎与外置输入法一致的输入体验； 谦虚而活跃的作者，作者曾经连续花几个小时和我一起定位一个 issue 。 配置如下 (doom-emacs 配置格式) ：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 ;; packages.el (package! liberime :recipe (:host github :repo \u0026#34;DogLooksGood/liberime\u0026#34; :files (\u0026#34;CMakeLists.txt\u0026#34; \u0026#34;Makefile\u0026#34; \u0026#34;src\u0026#34; \u0026#34;*.el\u0026#34;))) (package! rime :recipe (:host github :repo \u0026#34;DogLooksGood/emacs-rime\u0026#34; :files (\u0026#34;rime.el\u0026#34;))) ;; config.el (use-package! liberime-config :init (setenv \u0026#34;RIME_PATH\u0026#34; \u0026#34;~/repos/librime\u0026#34;) (setq liberime-shared-data-dir (file-truename \u0026#34;~/Library/Rime\u0026#34;) liberime-user-data-dir (file-truename \u0026#34;~/.local/liberime\u0026#34;)) :hook (\u0026#39;after-init . (lambda () (when (fboundp \u0026#39;liberime-sync-user-data) (liberime-sync)))) (\u0026#39;liberime-after-start . (lambda () (liberime-select-schema \u0026#34;wubi86_jidian\u0026#34;)))) (use-package! rime :after liberime-config :after-call after-find-file pre-command-hook :custom (default-input-method \u0026#34;rime\u0026#34;) (rime-show-candidate \u0026#39;posframe) :config (defadvice! +rime--posframe-display-result-a (args) \u0026#34;给 `rime--posframe-display-result\u0026#39; 传入的字符串加一个全角空 格，以解决 `posframe\u0026#39; 偶尔吃字的问题。\u0026#34; :filter-args #\u0026#39;rime--posframe-display-result (cl-destructuring-bind (result) args (let ((newresult (if (string-blank-p result) result (concat result \u0026#34;　\u0026#34;)))) (list newresult)))) (load! \u0026#34;+rime-probe-english\u0026#34;)) pyim 里的探针函数非常好用， emacs-rime 里也提供了几个，我从 pyim 里移植了一个觉得好用的，另外又写了两个自用的探针，代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 ;;; +rime-probe-english.el -*- lexical-binding: t; -*- ;; ;; Some functions copied from `pyim\u0026#39;, thanks for tumashu@github.com . ;; (defun +rime--char-before-to-string (num) \u0026#34;得到光标前第 `num\u0026#39; 个字符，并将其转换为字符串。\u0026#34; (let* ((point (point)) (point-before (- point num))) (when (and (\u0026gt; point-before 0) (char-before point-before)) (char-to-string (char-before point-before))))) (defun +rime--string-match-p (regexp string \u0026amp;optional start) \u0026#34;与 `string-match-p\u0026#39; 类似，如果 REGEXP 和 STRING 是非字符串时， 不会报错。\u0026#34; (and (stringp regexp) (stringp string) (string-match-p regexp string start))) (defun +rime--probe-auto-english () \u0026#34;激活这个探针函数后，使用下面的规则自动切换中英文输入： 1. 当前字符为英文字符（不包括空格）时，输入下一个字符为英文字符 2. 当前字符为中文字符或输入字符为行首字符时，输入的字符为中文字符 3. 以单个空格为界，自动切换中文和英文字符 即，形如 `我使用 emacs 编辑此函数\u0026#39; 的句子全程自动切换中英输入法 \u0026#34; (let ((str-before-1 (+rime--char-before-to-string 0)) (str-before-2 (+rime--char-before-to-string 1))) (unless (string= (buffer-name) \u0026#34; *temp*\u0026#34;) (if (\u0026gt; (point) (save-excursion (back-to-indentation) (point))) (or (if (+rime--string-match-p \u0026#34; \u0026#34; str-before-1) (+rime--string-match-p \u0026#34;\\\\cc\u0026#34; str-before-2) (not (+rime--string-match-p \u0026#34;\\\\cc\u0026#34; str-before-1)))))))) (defun +rime--beancount-p () \u0026#34;当前为`beancount-mode\u0026#39;，且光标在注释或字符串当中。\u0026#34; (when (derived-mode-p \u0026#39;beancount-mode) (not (or (nth 3 (syntax-ppss)) (nth 4 (syntax-ppss)))))) (defun +rime--evil-mode-p () \u0026#34;检测当前是否在 `evil\u0026#39; 模式下。\u0026#34; (or (evil-normal-state-p) (evil-visual-state-p) (evil-motion-state-p) (evil-operator-state-p))) (defun +rime-english-prober() \u0026#34;自定义英文输入探针函数，用于在不同mode下使用不同的探针列表\u0026#34; (let ((use-en (or (button-at (point)) (+rime--evil-mode-p)))) (if (derived-mode-p \u0026#39;telega-chat-mode) (setq use-en (or use-en (+rime--probe-auto-english))) (when (derived-mode-p \u0026#39;text-mode) (setq use-en (or use-en (+rime--probe-auto-english)))) (when (derived-mode-p \u0026#39;prog-mode \u0026#39;conf-mode) (setq use-en (or use-en (rime--after-alphabet-char-p)))) (setq use-en (or use-en (rime--prog-in-code-p) (+rime--beancount-p)))) use-en)) (setq rime-disable-predicates \u0026#39;(+rime-english-prober)) 刚刚给作者提了点小建议，得到了非常积极的响应，非常感谢 DogLooksGood@github.com 的贡献。 emacs-rime 还在不断完善中，希望 emacs-rime 越做越好，造福更多的 emacer 。\n另外，再次感谢 pyim 和 posframe 的大神 tumashu@github.com ，造了那么多优秀的轮子。\n","date":"2020-03-17T00:00:00Z","permalink":"https://sunyour.org/post/%E6%88%91%E7%9A%84-emacs-%E5%86%85%E7%BD%AE%E8%BE%93%E5%85%A5%E6%B3%95%E6%AD%A3%E5%BC%8F%E6%94%B9%E7%94%A8-emacs-rime/","title":"我的 emacs 内置输入法正式改用 emacs-rime"},{"content":"（ 注 ：竟然是误打误撞给蒙到了，把注释里的 10.4 看成了 10.14，以为是对 10.14+ 版本有效，看来是对老版本的兼容处理，但是不知道为什么我现在是 10.15 了，竟然用这个方法解决了。）\n在 mac 上通过 brew install dbus 安装好 dbus 后，却无论如何无法启动，试过\u0026ndash;HEAD 也是不行。后来看到源码包里的 \u0026lsquo;org.freedesktop.dbus-session.plist.in\u0026rsquo; 文件里有这么几行：\n1 2 3 4 5 \u0026lt;!-- Please uncomment on 10.4; OnDemand doesn\u0026#39;t work properly there. --\u0026gt; \u0026lt;!-- \u0026lt;key\u0026gt;OnDemand\u0026lt;/key\u0026gt; \u0026lt;false /\u0026gt; --\u0026gt; 看说明，是要在 10.4 版加这一段，不知道我的系统是不是也一样，本着试一试的想法把\n1 2 \u0026lt;key\u0026gt;OnDemand\u0026lt;/key\u0026gt; \u0026lt;false/\u0026gt; 加到 \u0026lsquo;/usr/local/Cellar/dbus/1.12.16/org.freedesktop.dbus-session.plist\u0026rsquo; 里，然后重新执行\n1 brew services stop dbus \u0026amp;\u0026amp; brew services start dbus 竟然真的可以了，特此记录，以备后查。\n","date":"2020-01-22T00:00:00Z","permalink":"https://sunyour.org/post/%E5%9C%A8-macos-%E4%B8%8A%E5%90%AF%E5%8A%A8-dbus/","title":"在 macos 上启动 dbus"},{"content":"经过一段时间的调整，telega.el 的配置也基本固定了，都是一些细节上的小调整。另外自己加了个 advice，根据不同类型的 chatbuf 自动激活或关闭中文输入法，现在基本上做到进入 chatbuf 不需要切换输入法了。全部配置代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 (use-package! telega :commands (telega) :defer t :bind (\u0026#34;C-M-S-s-t\u0026#34; . #\u0026#39;telega) :init (unless (display-graphic-p) (setq telega-use-images nil)) :hook (\u0026#39;telega-chat-mode . #\u0026#39;yas-minor-mode-on) (\u0026#39;telega-chat-mode . (lambda () (set-company-backend! \u0026#39;telega-chat-mode (append \u0026#39;(telega-company-emoji telega-company-username telega-company-hashtag) (when (telega-chat-bot-p telega-chatbuf--chat) \u0026#39;(telega-company-botcmd)))))) (\u0026#39;telega-chat-pre-message . #\u0026#39;telega-msg-ignore-blocked-sender) :config (defadvice! +toggle-input-method--telega-chat-mode-a (chat) \u0026#34;在 telega-chat-mode 里根据 chat 名称切换输入法，如果名称包含 中文，则激活中文输入法，否则关闭中文输入法\u0026#34; :after #\u0026#39;telega-chat--pop-to-buffer (let ((input-method \u0026#34;pyim\u0026#34;) (title (telega-chat-title chat)) (cn-list (list \u0026#34;#archlinux-cn\u0026#34; \u0026#34;wikipedia-zh\u0026#34; \u0026#34;Jetbrains Agent\u0026#34; \u0026#34;SCP-079-CHAT\u0026#34;)) (en-list (list \u0026#34;telega.el\u0026#34;))) (cond ((member title cn-list) (activate-input-method input-method)) ((member title en-list) (activate-input-method nil)) ((string-match \u0026#34;\\\\cc\u0026#34; title) (activate-input-method input-method)) ((telega-chat-bot-p chat) (activate-input-method nil)) ((telega-chat-private-p chat) (activate-input-method input-method)) (t (activate-input-method nil))))) (set-evil-initial-state! \u0026#39;(telega-root-mode telega-chat-mode) \u0026#39;emacs) (setq telega-proxies (list \u0026#39;(:server \u0026#34;127.0.0.1\u0026#34; :port 1086 :enable t :type (:@type \u0026#34;proxyTypeSocks5\u0026#34;))) telega-chat-reply-prompt \u0026#34;\u0026lt;\u0026lt;\u0026lt; \u0026#34; telega-chat-edit-prompt \u0026#34;+++ \u0026#34; telega-chat-use-markdown-version nil telega-animation-play-inline t telega-emoji-use-images nil telega-sticker-set-download t) (pushnew! telega-known-inline-bots \u0026#34;@vid\u0026#34; \u0026#34;@bing\u0026#34; \u0026#34;@wiki\u0026#34; \u0026#34;@imdb\u0026#34;) (set-popup-rule! (regexp-quote telega-root-buffer-name) :side \u0026#39;right :size 100 :quit t :modeline t) (set-popup-rule! \u0026#34;^◀[[({\u0026lt;].*[\\])}\u0026gt;]$\u0026#34; :side \u0026#39;right :size 100 :quit t :modeline t) (telega-mode-line-mode 1) (telega-url-shorten-mode 1) (when (featurep! :completion ivy) (load! \u0026#34;+ivy-telega\u0026#34;)) (after! all-the-icons (add-to-list \u0026#39;all-the-icons-mode-icon-alist \u0026#39;(telega-root-mode all-the-icons-fileicon \u0026#34;telegram\u0026#34; :heigt 1.0 :v-adjust -0.2 :face all-the-icons-yellow)) (add-to-list \u0026#39;all-the-icons-mode-icon-alist \u0026#39;(telega-chat-mode all-the-icons-fileicon \u0026#34;telegram\u0026#34; :heigt 1.0 :v-adjust -0.2 :face all-the-icons-blue)))) 另外本人的 doom 私有配置在：这里，其中 master 分支稍微延后， develop 分支实时更新，有兴趣的同学可以浏览指导。\n","date":"2020-01-19T00:00:00Z","permalink":"https://sunyour.org/post/telega.el%E9%98%B6%E6%AE%B5%E6%80%A7%E9%85%8D%E7%BD%AE%E5%B0%8F%E7%BB%93/","title":"telega.el阶段性配置小结"},{"content":"这两天受到 @SteamedFish 和@Locez 的鼓动，而且本人的 doom 配置也积累到一定程度了，是时候把自己的 doom-private-config 进行模块化拆分，以方便管理维护了。\n本来预想是挺简单的事，把集中在一起的配置，按照不同的类型，新建对应的 module 目录，然后建立 config.el 和 packages.el，把配置代码对应部分剪切过来就行了。结果拆分完毕一启动，一堆报错信息。汗～\n冷静，冷静。查看错误信息，发现都是无效函数和参数为空的信息。这就怪了，配置代码完全没变，只是放在了不同的位置。莫非……跟执行的顺序有关？尝试把所有与已有 package 有关的配置代码都用 after! 括起来，确保配置代码在对应的 package 加载之后才执行。再次重新启动，果然可以了！看来之前的 ~/.doom.d/config.el 文件里的代码是在各个 modules 加载之后才执行的。\n至此以为，万事大吉。而且可喜的是， emacs 的启动时间竟然减少了 1 秒，真是意外的收获。可运行一段时间以后，总觉得有些不对劲，仔细观察发现是 theme 的部分颜色有异常，由于我是使用 theme-changer 包根据日出日落时间自动切换 theme 的，已经在 use-package! 的 :after 中指定在 doom-themes 和 solaire-mode 之后加载了，怎么还会有问题呢？\n没有出错提示，那就说明是正常执行了，还有异常说明有些配置被别的代码修改了，应该还是执行顺序的问题。我尝试让此 package 延迟 5 秒加载，发现问题依旧，那看来最后执行是不可以的，肯定在这之前 doom 有一些 ui 方面的处理。从 ~/.emacs.d/init.el 开始查找，在 core.el 里的 doom-initialize 函数中找到了说明， doom 的加载顺序为：\n1 2 3 4 5 6 7 8 9 10 11 12 ~/.emacs.d/init.el ~/.emacs.d/core/core.el ~/.doom.d/init.el Module init.el files `doom-before-init-modules-hook\u0026#39; Module config.el files ~/.doom.d/config.el `doom-init-modules-hook\u0026#39; `after-init-hook\u0026#39; `emacs-startup-hook\u0026#39; `doom-init-ui-hook\u0026#39; `window-setup-hook\u0026#39; 果然发现有一个 doom-init-ui-hook，这个 hook 看名字就是和 ui 初始化有关，加上看到 ~/.doom.d/config.el 的次序也在它之前，八成是这样没跑了。最后选中 emacs-startup-hook 作为注入点，再次重新启动。\n完美～\n[1 月 13 日更新]\n无意中发现 tabnine 没生效，根据前一日的经验，应该也是执行顺序的事， tabnine 要修改 company-backends 的值，估计是 doom 里的 company 之后又有修改 company-backends 的操作，哪怕是在 tabnine 中指定 after company 也不行。依据前述办法，把增加 company-backends 操作加在后面次序的 hook 中，我选定的是 after-init-hook，重启后生效。最终 tabnine 的配置代码是：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 (use-package! company-tabnine :when (featurep! :completion company) :hook (kill-emacs . company-tabnine-kill-process) (lsp-after-open . (lambda () (add-to-list \u0026#39;company-transformers \u0026#39;company//sort-by-tabnine t) (add-to-list \u0026#39;company-backends \u0026#39;(company-lsp :with company-tabnine :separate)))) (after-init . (lambda () (add-to-list \u0026#39;company-backends #\u0026#39;company-tabnine) (set-company-backend! \u0026#39;text-mode \u0026#39;company-tabnine \u0026#39;company-dabbrev \u0026#39;company-yasnippet \u0026#39;company-ispell) (set-company-backend! \u0026#39;conf-mode \u0026#39;company-tabnine \u0026#39;company-capf \u0026#39;company-dabbrev-code \u0026#39;company-yasnippet) (set-company-backend! \u0026#39;prog-mode \u0026#39;company-tabnine \u0026#39;company-capf \u0026#39;company-yasnippet))) :config (set company-idle-delay 1) (map! (:leader :desc \u0026#34;Use company default backend\u0026#34; \u0026#34;clo\u0026#34; #\u0026#39;company-other-backend :desc \u0026#34;Use company tabnine backend\u0026#34; \u0026#34;clt\u0026#34; #\u0026#39;company-tabnine)) ;; Integrate company-tabnine with lsp-mode (defun company//sort-by-tabnine (candidates) (if (or (functionp company-backend) (not (and (listp company-backend) (memq \u0026#39;company-tabnine company-backend)))) candidates (let ((candidates-table (make-hash-table :test #\u0026#39;equal)) candidates-lsp candidates-tabnine) (dolist (candidate candidates) (if (eq (get-text-property 0 \u0026#39;company-backend candidate) \u0026#39;company-tabnine) (unless (gethash candidate candidates-table) (push candidate candidates-tabnine)) (push candidate candidates-lsp) (puthash candidate t candidates-table))) (setq candidates-lsp (nreverse candidates-lsp)) (setq candidates-tabnine (nreverse candidates-tabnine)) (nconc (seq-take candidates-tabnine 3) (seq-take candidates-lsp 6)))))) ","date":"2020-01-12T00:00:00Z","permalink":"https://sunyour.org/post/%E6%A8%A1%E5%9D%97%E5%8C%96%E6%8B%86%E5%88%86doom-private-config%E7%9A%84%E6%94%B6%E8%8E%B7/","title":"模块化拆分doom-private-config的收获"},{"content":"在闲鱼上处理一些不用的东西，开始仅仅是记 Income:Sales 和 Assets:Alipay 这两个账户，当邮寄物品时再记 Expenses:ExpressFee 支出。但总是觉得有问题，一是有人购买时当时并没有收到货款，而是在支付宝中暂存着，只有买方确认收货后才能真正收到货款；二是收到的款项并不代表真实收入，而是包含着运费，不应该全部记为收入才对。\n但是琢磨了半天也没想明白到底应该怎么记，最主要的是如何在发快递时平掉全部货款中的运费部分。因为在发快递时记：贷银行账户/借快递费两项，两项已经平了，没有其它账户去平收到款项中的运费了。\n祭出搜索大法，了解了很多销售类公司垫付运费销售货物的记账方法，总算弄明白了。之前记账中有一个很大的误解，就是快递发货记支出，其实这里不应该记支出，因为是替买方应付的运费，所以应该记为贷其它应收。而在实际发货垫付运费时记为借其它应收，贷银行账户。\n总体记账条目如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ;; 卖出时 2019-11-01 * \u0026#34;闲鱼\u0026#34; \u0026#34;卖HHKB键帽\u0026#34; Assets:AccountsReceivable:Alipay 214.00 CNY Income:Sales -200.00 CNY Assets:OtherReceivables:ExpressFee -14.00 CNY ;; 快递发出 2019-11-02 * \u0026#34;快递\u0026#34; \u0026#34;闲鱼发货——卖HHKB键帽\u0026#34; Assets:Alipay:Saving -14.00 CNY Assets:OtherReceivables:ExpressFee 14.00 CNY ;; 收到货款时 2019-11-10 * \u0026#34;支付宝\u0026#34; \u0026#34;收到货款——卖HHKB键帽\u0026#34; Assets:Alipay:Saving 214.00 CNY Assets:AccountsReceivable:Alipay -214.00 CNY ","date":"2019-12-02T00:00:00Z","permalink":"https://sunyour.org/post/beancount%E4%BD%BF%E7%94%A8%E5%8D%96%E5%87%BA%E7%89%A9%E5%93%81%E7%9A%84%E8%AE%B0%E8%B4%A6/","title":"Beancount使用——卖出物品的记账"},{"content":"记录一下留存备忘（这是.json.erb 文件，需要生成对应的 json 文件才可用）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 { \u0026#34;title\u0026#34;: \u0026#34;Sunn Yao\u0026#39;s Personal Configurations\u0026#34;, \u0026#34;rules\u0026#34;: [ { \u0026#34;description\u0026#34;: \u0026#34;Change enter to control if pressed with other keys\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: \u0026lt;%= from(\u0026#34;return_or_enter\u0026#34;, [], [\u0026#34;any\u0026#34;]) %\u0026gt;, \u0026#34;to\u0026#34;: \u0026lt;%= to([[\u0026#34;right_control\u0026#34;]]) %\u0026gt;, \u0026#34;to_if_alone\u0026#34;: \u0026lt;%= to([[\u0026#34;return_or_enter\u0026#34;]]) %\u0026gt; } ] }, { \u0026#34;description\u0026#34;: \u0026#34;Change caps_lock to control if pressed with other keys, to escape if pressed alone.\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: \u0026lt;%= from(\u0026#34;caps_lock\u0026#34;, [], [\u0026#34;any\u0026#34;]) %\u0026gt;, \u0026#34;to\u0026#34;: \u0026lt;%= to([[\u0026#34;left_control\u0026#34;]]) %\u0026gt;, \u0026#34;to_if_alone\u0026#34;: \u0026lt;%= to([[\u0026#34;escape\u0026#34;]]) %\u0026gt; } ] }, { \u0026#34;description\u0026#34;: \u0026#34;Post escape if left_control is pressed alone.\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: \u0026lt;%= from(\u0026#34;left_control\u0026#34;, [], [\u0026#34;any\u0026#34;]) %\u0026gt;, \u0026#34;to\u0026#34;: \u0026lt;%= to([[\u0026#34;left_control\u0026#34;]]) %\u0026gt;, \u0026#34;to_if_alone\u0026#34;: \u0026lt;%= to([[\u0026#34;escape\u0026#34;]]) %\u0026gt; } ] }, { \u0026#34;description\u0026#34;: \u0026#34;Change left_shift to Ctrl-\\\\ if pressed alone in Emacs\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: \u0026lt;%= from(\u0026#34;left_shift\u0026#34;, [], []) %\u0026gt;, \u0026#34;to\u0026#34;: \u0026lt;%= to([[\u0026#34;left_shift\u0026#34;]]) %\u0026gt;, \u0026#34;to_if_alone\u0026#34;: \u0026lt;%= to([[\u0026#34;backslash\u0026#34;, [\u0026#34;left_control\u0026#34;]]]) %\u0026gt;, \u0026#34;conditions\u0026#34;: [ \u0026lt;%= frontmost_application_if(\u0026#34;emacs\u0026#34;) %\u0026gt; ] } ] }, { \u0026#34;description\u0026#34;: \u0026#34;Change right_shift to Ctrl-\\\\ if pressed alone in Emacs\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: \u0026lt;%= from(\u0026#34;right_shift\u0026#34;, [], []) %\u0026gt;, \u0026#34;to\u0026#34;: \u0026lt;%= to([[\u0026#34;right_shift\u0026#34;]]) %\u0026gt;, \u0026#34;to_if_alone\u0026#34;: \u0026lt;%= to([[\u0026#34;backslash\u0026#34;, [\u0026#34;left_control\u0026#34;]],]) %\u0026gt;, \u0026#34;conditions\u0026#34;: [ \u0026lt;%= frontmost_application_if(\u0026#34;emacs\u0026#34;) %\u0026gt; ] } ] }, { \u0026#34;description\u0026#34;: \u0026#34;Change left_gui+spacebar to left_alt+spacebar in Emacs\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: \u0026lt;%= from(\u0026#34;spacebar\u0026#34;, [\u0026#34;left_gui\u0026#34;], []) %\u0026gt;, \u0026#34;to\u0026#34;: \u0026lt;%= to([[\u0026#34;spacebar\u0026#34;, [\u0026#34;left_alt\u0026#34;]]]) %\u0026gt;, \u0026#34;conditions\u0026#34;: [ \u0026lt;%= frontmost_application_if(\u0026#34;emacs\u0026#34;) %\u0026gt; ] } ] }, { \u0026#34;description\u0026#34;: \u0026#34;Change left_gui+x to left_alt+x in Emacs\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: \u0026lt;%= from(\u0026#34;x\u0026#34;, [\u0026#34;left_gui\u0026#34;], []) %\u0026gt;, \u0026#34;to\u0026#34;: \u0026lt;%= to([[\u0026#34;x\u0026#34;, [\u0026#34;left_alt\u0026#34;]]]) %\u0026gt;, \u0026#34;conditions\u0026#34;: [ \u0026lt;%= frontmost_application_if(\u0026#34;emacs\u0026#34;) %\u0026gt; ] } ] } ] } ","date":"2019-11-04T00:00:00Z","permalink":"https://sunyour.org/post/%E6%88%91%E7%9A%84karabiner-elements%E8%A7%84%E5%88%99%E8%AE%BE%E7%BD%AE/","title":"我的Karabiner-Elements规则设置"},{"content":"最近一直跟随大佬们在 Emacs 里用 telega，也逐渐开始喜欢在 emacs 里集中做事的方式。我用的是 doom-emacs，跟其它的 emacs 配置版本有些不同。一是像 spacemacs 一样，doom-emacs 也是全局使用 evil 包，这样对于类似我这样的 vim 党比较容易适应；二是 doom-emacs 里进行了比较深的封装，导致有些个性化配置不能生效。比如我想在 telega 里使用 telega-company-emoji 包进行表情补全，却发现按照官网的示例无论如何都不能生效，最后发现还是 doom-emacs 对 company-backends 的特殊处理造成的。因此对配置进行了一些修改，总算能正常使用了，现在贴出最终配置（11 月 21 日更新，注意在 packages.el 里加上 telega 包）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 ;; telegram client for emacs (use-package! telega :commands (telega) :defer t :bind (\u0026#34;C-c t\u0026#34; . #\u0026#39;telega) :init (unless (display-graphic-p) (setq telega-use-images nil)) :hook (\u0026#39;telega-root-mode . #\u0026#39;evil-emacs-state) (\u0026#39;telega-chat-mode . #\u0026#39;evil-emacs-state) (\u0026#39;telega-chat-mode . #\u0026#39;yas-minor-mode) (\u0026#39;telega-chat-mode . (lambda () (set-company-backend! \u0026#39;telega-chat-mode (append \u0026#39;(telega-company-emoji telega-company-username telega-company-hashtag) (when (telega-chat-bot-p telega-chatbuf--chat) \u0026#39;(telega-company-botcmd)))) (company-mode 1))) (\u0026#39;telega-chat-pre-message . #\u0026#39;telega-msg-ignore-blocked-sender) :config (setq telega-proxies (list \u0026#39;(:server \u0026#34;127.0.0.1\u0026#34; :port 1086 :enable t :type (:@type \u0026#34;proxyTypeSocks5\u0026#34;)))) (set-popup-rule! \u0026#34;^\\\\*Telega Root\u0026#34; :side \u0026#39;right :size 100 :quit nil :modeline t) (set-popup-rule! \u0026#34;^◀\\\\(\\\\[\\\\|\u0026lt;\\\\|{\\\\).*\\\\(\\\\]\\\\|\u0026gt;\\\\|}\\\\)\u0026#34; :side \u0026#39;right :size 100 :quit nil :modeline t) (telega-mode-line-mode 1)) ","date":"2019-11-01T00:00:00Z","permalink":"https://sunyour.org/post/doom-emacs%E9%87%8Ctelega%E7%9A%84%E9%85%8D%E7%BD%AE/","title":"Doom Emacs里telega的配置"},{"content":"Emacs 里使用 pyim 输入中文还是挺方便的，尤其是可以根据不同状态自动切换输入法，非常方便。但平常工作中经常遇到需要中英文混合输入的情况，这时就只能不断的按 Ctrl-\\切换，而这个组合键按起来就不是很方便了。如果能像外部输入法那样用 Shift 切换就好了，但是在 Emacs 里是不能把 Shift 键设成快捷键的，所以这个问题就一直放着了。\n后来有人提出，可以把 Shift 映射成一个 Fn（比如 F19)，再在 Emacs 里绑定切换输入法的快捷键，以此达到可以快捷切换的效果。我想，既然可以把 Shift 映射到 F，那干嘛不干脆把 Shift 映射到 Ctrl-\\岂不是更好，还省得多占一个快捷键。\n说干就干，达到目标是单独按 Shift 键，系统输出 Ctrl-\\快捷键，而 Shift 和其它键一起按时，还是输出 Shift 本身，另外最好这个映射只在 Emacs 里有效，这样就不会影响其它程序，避免出现意想不到的问题。\n基于这样的原则，在键盘层面进行编程映射就不合适了，因为它无法区分不同程序。MacOS 里有一款软件堪称神器，这就是 Karabiner-Elements，用它可以实现各种各样的键盘映射，而且完全免费。Karabiner-Elements 的安装使用此处省略，请自行搜索安装，这里只介绍一下如何自定义映射规则。\n映射规则理论上可以直接写 json 文件直接使用，比如我自己的 json 文件是：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 { \u0026#34;title\u0026#34;: \u0026#34;Change shift key (YH)\u0026#34;, \u0026#34;rules\u0026#34;: [ { \u0026#34;description\u0026#34;: \u0026#34;Change left_shift to Ctrl-\\\\ if pressed alone in Emacs\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;left_shift\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;optional\u0026#34;: [\u0026#34;any\u0026#34;] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;left_shift\u0026#34; } ], \u0026#34;to_if_alone\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;backslash\u0026#34;, \u0026#34;modifiers\u0026#34;: [\u0026#34;left_control\u0026#34;] } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [\u0026#34;^org\\\\.gnu\\\\.Emacs$\u0026#34;] } ] } ] } ] } 但我多次尝试直接编写 json 文件都无法成功添加，最后发现是文件换行格式的问题，因此实际的作法是编写 erb 文件，然后用 KE-complex_modifications 进行生成，这样生成的 json 文件格式就完全没问题了。\n先从 github 下 clone 下来 KE-complex_modifications 代码：\n1 git clone https://github.com/pqrs-org/KE-complex_modifications 然后进入 KE-complex_modifications 目录，并在 src/json 目录下新建一个后缀为.json.erb 的文件，如 yh-shift.json.erb，内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 { \u0026#34;title\u0026#34;: \u0026#34;Change shift key (YH)\u0026#34;, \u0026#34;rules\u0026#34;: [ { \u0026#34;description\u0026#34;: \u0026#34;Change left_shift to Ctrl-\\\\ if pressed alone in Emacs\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34;, \u0026#34;from\u0026#34;: \u0026lt;%= from(\u0026#34;left_shift\u0026#34;, [], [\u0026#34;any\u0026#34;]) %\u0026gt;, \u0026#34;to\u0026#34;: \u0026lt;%= to([[\u0026#34;left_shift\u0026#34;]]) %\u0026gt;, \u0026#34;to_if_alone\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;backslash\u0026#34;, \u0026#34;modifiers\u0026#34;: [ \u0026#34;left_control\u0026#34; ] } ], \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^org\\\\.gnu\\\\.Emacs$\u0026#34; ] } ] } ] } ] } 然后编辑 docs/groups.json 文件，里面在比照已有代码在任意一个组内增加一段代码，指定 json 文件名称（注意后面没有.erb 后缀，注意前后的逗号分隔）：\n1 2 3 { \u0026#34;path\u0026#34;: \u0026#34;json/yh-shift.json\u0026#34; } 这时执行 make，如果文件没有错误的话，就会在 docs/json/目录下生成 yh-shift.json。把这个文件拷贝到 Karabiner-Elements 的配置目录下：\n1 cp docs/json/yh-shift.json ~/.config/karabiner/assets/complex_modifications/ 这时就可以在 karabiner-Elements 设置里导入这项规则了。菜单项是：Karabiner-Elements Preferences \u0026gt; Complex Modifications \u0026gt; Rules \u0026gt; Add rule\n大功告成。\n","date":"2019-11-01T00:00:00Z","permalink":"https://sunyour.org/post/%E8%A7%A3%E5%86%B3emacs%E9%87%8Cshift%E5%88%87%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98/","title":"解决Emacs里Shift切换输入法的问题"},{"content":"今天查看 beancount 的配置，总觉得配置写的有点笨，稍微优化了一点点。其中把.bean 和.beancount 文件都映射到 beancount-mode，之前是用两条语句完成，应该用正则表达式`\u0026quot;\\\\.bean\\\\(count\\)\\\\\u0026rsquo;\u0026quot;`一行语句就设置完成就好。可能是习惯使然，顺便查了一下 auto-mode-alist 的值，竟然发现里面的值都是类似`\u0026quot;\\\\.bean\\\\(?:count\\)\\\\\u0026rsquo;\u0026quot;`的形式，里面多了一个`?:`，不知是什么作用。祭出 google 大法后，才明白`?:`的作用。\n要理解?=和?!，首先需要理解前瞻，后顾，负前瞻，负后顾四个概念：\n1 2 3 4 5 6 7 8 // 前瞻： exp1(?=exp2) 查找exp2前面的exp1 // 后顾： (?\u0026lt;=exp2)exp1 查找exp2后面的exp1 // 负前瞻： exp1(?!exp2) 查找后面不是exp2的exp1 // 负后顾： (?\u0026lt;!exp2)exp1 查找前面不是exp2的exp1 举例：\n1 2 \u0026#34;中国人\u0026#34;.replace(/(?\u0026lt;=中国)人/, \u0026#34;rr\u0026#34;) // 匹配中国人中的人，将其替换为rr，结果为 中国rr \u0026#34;法国人\u0026#34;.replace(/(?\u0026lt;=中国)人/, \u0026#34;rr\u0026#34;) // 结果为 法国人，因为人前面不是中国，所以无法匹配到 要理解?:则需要理解捕获分组和非捕获分组的概念：\n1 2 ()表示捕获分组，()会把每个分组里的匹配的值保存起来，使用$n(n是一个数字，表示第n个捕获组的内容) (?:)表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来 举例：\n1 2 // 数字格式化 1,123,000 \u0026#34;1234567890\u0026#34;.replace(/\\B(?=(?:\\d{3})+(?!\\d))/g,\u0026#34;,\u0026#34;) // 结果：1,234,567,890，匹配的是后面是3*n个数字的非单词边界(\\B) 之前一直觉得自己对正则表达式已经掌握的不错了，现在看来还是远远不够，学无止尽啊！\n","date":"2019-10-26T00:00:00Z","permalink":"https://sunyour.org/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E5%92%8C%E5%92%8C%E7%9A%84%E7%90%86%E8%A7%A3/","title":"正则表达式中?=和?:和?!的理解"},{"content":"在蒸鱼大佬的鼓励下，终于把自己的 doom.d 配置公开了出来。今天蒸鱼大佬回复说用到了一部分，我心情老好了^_^，一直以来都是一个学生的身份，从没想过自己的东西能对别人有小小帮助，今天能得到哪怕是一点点认可，也还是非常开心，嘿。\n贴一下配置地址： https://github.com/cnsunyour/.doom.d\n","date":"2019-10-21T00:00:00Z","permalink":"https://sunyour.org/post/%E7%BB%88%E4%BA%8E%E6%8A%8A%E8%87%AA%E5%B7%B1%E7%9A%84doom.d%E9%85%8D%E7%BD%AE%E5%85%AC%E5%BC%80%E4%BA%86/","title":"终于把自己的doom.d配置公开了"},{"content":"把仅有的没有什么价值的 20 几篇短文迁移到 ox-hugo 后，开始使用 hugo-primer 主题没有什么问题，后来还是对 hugo-primer 不太喜欢，浏览了几十个主题 demo 后，发现还是论坛和群里人们用的最多的 even 和 jane 两个主题更喜欢一些。\n但没想到的是，改用这两个主题后，全部出现文章渲染失败的情况。看提示，是 author 属性的类型不是 string 类型，而是[]string 类型，看样子是类似数组或列表之类的类型。找一篇生成后的 md 文件查看，果然 author 属性的值是[不一般的凡]，外面被中括号括起来了。\n心中很不理解为什么，查看 ox-hugo 文档，发现还真是特意这么做的，为的是处理多个:author:属性，也就是多作者的情况。ox-hugo 文档中还专门有一节写了这个情况：\nLink: https://ox-hugo.scripter.co/doc/author/\n文中提到有两个解决办法，第一是禁止导出 author 参数，方法是在 org 文件头加上\n1 #+options: author:nil 或在 subtree 里加上属性：\n1 2 3 :PROPERTIES: :EXPORT_OPTIONS: author:nil :END: 第二个解决办法就是修改主题模板来支持[]string 形式的 list，也即在调用.Param.author 属性时使用如下代码段：\n1 2 3 4 5 6 7 8 9 {{ with .Params.author }} {{ $author_type := (printf \u0026#34;%T\u0026#34; .) }} {{ $author_is_slice := (eq \u0026#34;[]string\u0026#34; $author_type) }} {{ if $author_is_slice }} {{ delimit . \u0026#34;, \u0026#34; }} {{ else }} {{ . }} {{ end }} {{ end }} 我还是觉得应该从主题这里下手，经过搜索对比，对两个主题做了一些修改，以 even 主题为例，需要修改的是两个文件，第一个是 layouts/partials/head.html 的第 13 行，原为：\n1 \u0026lt;meta name=\u0026#34;author\u0026#34; content=\u0026#34;{{ if .Params.author }}{{ .Params.author | safeHTML}}{{ else }}{{ .Site.Author.name | safeHTML }}{{ end }}\u0026#34; /\u0026gt; 修改为：\n1 \u0026lt;meta name=\u0026#34;author\u0026#34; content=\u0026#34;{{ if .Params.author }}{{ with .Params.author }}{{ $author_type := (printf \u0026#34;%T\u0026#34; .) }}{{ $author_is_slice := (eq \u0026#34;[]string\u0026#34; $author_type) }}{{ if $author_is_slice }}{{ delimit . \u0026#34;, \u0026#34; | safeHTML }}{{ else }}{{ . | safeHTML}}{{ end }}{{ end }}{{ else }}{{ .Site.Author.name | safeHTML }}{{ end }}\u0026#34; /\u0026gt; 第二个文件是 layouts/partials/post/copyright.html 的第 4 行，原为：\n1 \u0026lt;span class=\u0026#34;item-content\u0026#34;\u0026gt;{{ if .Params.author }}{{ .Params.author | safeHTML }}{{ else }}{{ .Site.Author.name | safeHTML }}{{ end }}\u0026lt;/span\u0026gt; 修改为：\n1 \u0026lt;span class=\u0026#34;item-content\u0026#34;\u0026gt;{{ if .Params.author }}{{ with .Params.author }}{{ $author_type := (printf \u0026#34;%T\u0026#34; .) }}{{ $author_is_slice := (eq \u0026#34;[]string\u0026#34; $author_type) }}{{ if $author_is_slice }}{{ delimit . \u0026#34;, \u0026#34; | safeHTML }}{{ else }}{{ . | safeHTML }}{{ end }}{{ end }}{{ else }}{{ .Site.Author.name | safeHTML }}{{ end }}\u0026lt;/span\u0026gt; 两个文件修改完成后重新启动 hugo server 渲染成功。\njane 主题类似，需要修改的文件是 layouts/partials/head.html 第 25 行至 30 行那一段，但是我对 hugo 的 template 语法不熟，这段不知道怎么改，请了解的同学做相应改动吧。\n当然有可能考虑不周，even 主题我已经提交了 PR，jane 主题我提了 issue，不知会不会被接受。\n","date":"2019-09-09T00:00:00Z","permalink":"https://sunyour.org/post/%E8%A7%A3%E5%86%B3ox-hugo%E5%AF%BC%E5%87%BA%E5%B8%A6%E6%9C%89author%E5%B1%9E%E6%80%A7%E7%9A%84%E6%96%87%E4%BB%B6%E5%90%8Ehugo-even%E5%92%8Cjane%E4%B8%BB%E9%A2%98%E6%B8%B2%E6%9F%93%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/","title":"解决ox-hugo导出带有:author:属性的文件后hugo even和jane主题渲染失败的问题"},{"content":"在用 ox-hugo 导出到 markdown 文件时，发现也会出现类似 org2blog 发布文章时的文字换行问题，也就是在 org 文件中的换行符没有自动清除掉。不一样的是，中文之间的换行符已经清除了，但是有英文之间或中英混合文字之间有换行符时就不会清除，这样在最后生成的 html 页面中就会转换成\u0026lt;br /\u0026gt;，所以必须要处理一下。\n类似于 org-html-paragraph，我给 org-hugo-paragraph 也增加一个 advice，处理方法与 org-html-paragraph 的完全一样，代码完全可以复用。\n另外，对原先的代码也进行了一下升级，对中英文混合之间的换行符进行清除，对两个英文之间的换行符替换为空格。\n更新后的完整代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 (defadvice! +chinese--org-html-paragraph-a (args) \u0026#34;Join consecutive Chinese lines into a single long line without unwanted space when exporting org-mode to html.\u0026#34; :filter-args #\u0026#39;org-html-paragraph (++chinese--org-paragraph-a args)) (defadvice! +chinese--org-hugo-paragraph-a (args) \u0026#34;Join consecutive Chinese lines into a single long line without unwanted space when exporting org-mode to hugo markdown.\u0026#34; :filter-args #\u0026#39;org-hugo-paragraph (++chinese--org-paragraph-a args)) (defun ++chinese--org-paragraph-a (args) (cl-destructuring-bind (paragraph content info) args (let* ((origin-contents (replace-regexp-in-string \u0026#34;\u0026lt;[Bb][Rr][\\t ]*/\u0026gt;\u0026#34; \u0026#34;\u0026#34; content)) (origin-contents (replace-regexp-in-string \u0026#34;\\\\([[:multibyte:]]\\\\)[\\t ]*\\n[\\t ]*\\\\([[:multibyte:]]\\\\)\u0026#34; \u0026#34;\\\\1\\\\2\u0026#34; origin-contents)) (fixed-contents (replace-regexp-in-string \u0026#34;\\\\([^\\t ]\\\\)[\\t ]*\\n[\\t ]*\\\\([^\\t ]\\\\)\u0026#34; \u0026#34;\\\\1 \\\\2\u0026#34; origin-contents))) (list paragraph fixed-contents info)))) ","date":"2019-09-07T00:00:00Z","permalink":"https://sunyour.org/post/%E8%A7%A3%E5%86%B3ox-hugo%E5%AF%BC%E5%87%BA%E5%88%B0md%E6%96%87%E4%BB%B6%E6%97%B6%E7%9A%84%E6%8D%A2%E8%A1%8C%E9%97%AE%E9%A2%98/","title":"解决ox-hugo导出到md文件时的换行问题"},{"content":"昨晚跟群友 SteamedFish 交流 plantuml，发现在 org-mode 里的 src-block 代码块中写 plantuml 代码时，不能写上“@”开头的语句，否则必报错。必须在“@”前面加上“\\”或“,”才可以。后来经过多次尝试，发现在开头的@start 前面加上“\\”就可以。于是想到写个 defadvice 处理一下。另外把 SteamedFish 兄弟写的自动加上“:cmdline -charset utf-8”的方法也加了进来。另外在我的 doom-emacs 里 exec-mode 只能设置为`executable`，否则 C-c C-c 时报错，不知为啥。(**10 月 26 日更新** doom 修复了此问题，现在不用设置为`executable`也可以了)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ;; Change plantuml exec mode to `executable\u0026#39;, other mode execute error. (setq plantuml-default-exec-mode \u0026#39;executable) ;; Add `:cmdline -charset utf-8\u0026#39; to org-src-block:plantuml ;; Fix `@start\u0026#39; prefix execute error (use-package! ob-plantuml :when (featurep! :lang plantuml) :after plantuml-mode :init (defadvice! +fixstart--org-babel-plantuml-make-body (args) :filter-args #\u0026#39;org-babel-execute:plantuml (cl-destructuring-bind (body params) args (let* ((origin-body body) (fix-body (replace-regexp-in-string \u0026#34;^\\\\w*\\\\(@start\\\\)\u0026#34; \u0026#34;\\\\\\\\\\\\1\u0026#34; origin-body))) (list fix-body params)))) :config (add-to-list \u0026#39;org-babel-default-header-args:plantuml \u0026#39;(:cmdline . \u0026#34;-charset utf-8\u0026#34;))) **9 月 8 日更新** 已把此代码向 doom-emacs 提交 PR 并收录，根据 Henrik 的编码规范建议改为如下形式：\n1 2 3 4 5 6 7 8 9 10 11 12 13 (after! ob-plantuml (defadvice! +plantuml--fix-atstart-in-org-src-blocks-a (args) :filter-args #\u0026#39;org-babel-execute:plantuml (cl-destructuring-bind (body params) args (let* ((origin-body body) (fix-body (replace-regexp-in-string \u0026#34;^[[:blank:]\\n]*\\\\(@start\\\\)\u0026#34; \u0026#34;\\\\\\\\\\\\1\u0026#34; origin-body))) (list fix-body params)))) (add-to-list \u0026#39;org-babel-default-header-args:plantuml \u0026#39;(:cmdline . \u0026#34;-charset utf-8\u0026#34;))) ","date":"2019-08-29T00:00:00Z","permalink":"https://sunyour.org/post/%E5%AF%B9doom-emacs%E9%87%8Cplantuml%E7%9A%84%E6%94%B9%E8%BF%9B/","title":"对doom-emacs里plantuml的改进"},{"content":"最近 TG 群里有人推荐 qutebrowser 浏览器，据说全 VIM 操作方式，我觉得挺有意思，正好对 chrome 一家独大的情况本身也有点意见，就尝试一用吧。安装好打开一看，默认页面和搜索引擎是 duckduckgo，老早就听说 duckduckgo 的大名了，听说这是一个比较纯粹的注重隐私的搜索引擎，正好一起尝试。最近这段时间都会强制用这两个了。\n发现一个问题，就是 qutebrowser 无法使用 macos 的系统代理，上网搜索好久，貌似就是不支持。不得已，只能用 privoxy 实现一个支持 pac 的 http 代理了。不过意外的收获就是，在终端下把 http_proxy 和 https_proxy 改成 privoxy 以后其它用 http 代理的软件也就可以走 pac 代理了。privoxy 的配置比较简单，有一点就是 pip install gfwlist2privoxy 安装要在 python2 下，python3 无法使用。\n","date":"2019-08-25T00:00:00Z","permalink":"https://sunyour.org/post/%E5%BC%80%E5%A7%8B%E8%AF%95%E7%94%A8qutebrowser%E5%92%8Cduckduckgo/","title":"开始试用qutebrowser和duckduckgo"},{"content":"今天晚上孩子去剪发，回来手里拿着爷爷买的两块糖，我发现后，说了句“不能吃糖”，孩子立刻跟了句“可以吃”，我说咱们约定过，只有生日的时候可以吃糖，孩子不干了，一直说“不，就要现在吃”，我再接“不行”，没想到，孩子直接就哭了。这时爷爷马上过来哄孩子，并且把糖剥开给孩子吃。\n我不生气，但很难过。难过的是努力坚持的事情不但得不到老人的支持，还完全起反面作用。没有老人的支持，管孩子真的太难太难了。\n为了表明自己的态度，可能多少也包含点生气的意思吧，我没有吃晚饭，直接从爷爷家回到自己家了。给孩子妈妈发信息，让她早点回家，结果妈妈刚好已经回来了，正在爷爷家，两句话说明了一下情况，告诉妈妈配合自己，今天必须要严肃的对待孩子，否则孩子将来就没法管了。\n可能我的提前离开已经让孩子意识到什么了，也可能妈妈跟孩子说了什么了。一会儿妈妈带孩子回来了，听到他们娘俩儿悄悄商量怎么找我谈话来着。一会儿孩子慢慢的走到我身后喊我，以下是两人对话：\n儿子：爸爸～～ 我：怎么了？ 儿子：对不起。 我：为什么对不起呀？ 儿子：因为吃糖。 我：吃糖怎么不对？ 儿子：吃糖蛀牙。 我：知道口香糖蛀牙，那为什么还吃呀？ 儿子：…… 我：你是不是跟爸爸妈妈约定过过生日的时候可以吃糖和零食，其它时间不吃啊？ 儿子：嗯。 我：爸爸最难过的就是你答应爸爸妈妈的事情却不做到，你知道当你说我就要现在吃，然后还哇哇大哭让爷爷给你剥糖吃的时候，爸爸有多伤心。 儿子：…… 我：那，爸爸希望这是最后一次，你能答应我吗？ 儿子：能。 我：那好，那我们拉勾，好不好？ 儿子：好 我：拉了勾，就一定要说话算数哦～ 儿子：嗯（同时用力点了点头） ","date":"2019-08-07T00:00:00Z","permalink":"https://sunyour.org/post/%E4%BB%8A%E5%A4%A9%E5%A5%BD%E5%A5%BD%E6%95%99%E8%AE%AD%E4%B8%80%E4%B8%8B%E5%84%BF%E5%AD%90/","title":"今天好好教训一下儿子"},{"content":"今天发文一直发不出去，百思不得其解，打开 debug 跟踪一下，发现是调用了 doom-emacs 里 chinese 模块的过滤器出错，改用 spacemacs chinese layer 里的代码可以修复此问题（需要禁用 doom-emacs 里的 chinese module）。当然只禁用掉 chinese module 也可以，不过这段代码是在转换为网页时，把自动换行的空白符去掉，这样发布后的网页不会多一些莫名奇妙的空格。\n1 2 3 4 5 6 7 8 9 10 11 (defadvice org-html-paragraph (before org-html-paragraph-advice (paragraph contents info) activate) \u0026#34;Join consecutive Chinese lines into a single long line without unwanted space when exporting org-mode to html.\u0026#34; (let* ((origin-contents (ad-get-arg 1)) (fix-regexp \u0026#34;[[:multibyte:]]\u0026#34;) (fixed-contents (replace-regexp-in-string (concat \u0026#34;\\\\(\u0026#34; fix-regexp \u0026#34;\\\\) *\\n *\\\\(\u0026#34; fix-regexp \u0026#34;\\\\)\u0026#34;) \u0026#34;\\\\1\\\\2\u0026#34; origin-contents))) (ad-set-arg 1 fixed-contents))) **8 月 8 日更新** 使用如下代码彻底解决此问题：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 (defadvice! +chinese--org-html-paragraph-a (args) \u0026#34;Join consecutive Chinese lines into a single long line without unwanted space when exporting org-mode to html.\u0026#34; :filter-args #\u0026#39;org-html-paragraph (cl-destructuring-bind (paragraph content info) args (let* ((fix-regexp \u0026#34;[[:multibyte:]a-zA-Z0-9]\u0026#34;) (origin-contents content) (fixed-contents (replace-regexp-in-string (concat \u0026#34;\\\\(\u0026#34; fix-regexp \u0026#34;\\\\) *\\\\(\u0026lt;[Bb][Rr] */\u0026gt;\\\\)?\\n *\\\\(\u0026#34; fix-regexp \u0026#34;\\\\)\u0026#34;) \u0026#34;\\\\1\\\\3\u0026#34; origin-contents))) (list paragraph fixed-contents info)))) **8 月 31 日更新** 上述代码也有 Bug，也就是两边全是英文字符时有不能替换，更新 advice 代码（同时也向 doom-emacs 提交 PR）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 (defadvice! +chinese--org-html-paragraph-a (args) \u0026#34;Join consecutive Chinese lines into a single long line without unwanted space when exporting org-mode to html.\u0026#34; :filter-args #\u0026#39;org-html-paragraph (cl-destructuring-bind (paragraph content info) args (let* ((fix-regexp \u0026#34;[[:multibyte:]]\u0026#34;) (origin-contents (replace-regexp-in-string \u0026#34;\u0026lt;[Bb][Rr] */\u0026gt;\u0026#34; \u0026#34;\u0026#34; content)) (fixed-contents (replace-regexp-in-string (concat \u0026#34;\\\\(\u0026#34; fix-regexp \u0026#34;\\\\) *\\n *\\\\(\u0026#34; fix-regexp \u0026#34;\\\\)\u0026#34;) \u0026#34;\\\\1\\\\2\u0026#34; origin-contents))) (list paragraph fixed-contents info)))) ","date":"2019-08-01T00:00:00Z","permalink":"https://sunyour.org/post/%E5%8F%91%E7%8E%B0-org2blog-%E5%8F%91%E5%B8%83%E6%97%B6%E8%B0%83%E7%94%A8-doom-emacs-%E9%87%8C-chinese-%E6%A8%A1%E5%9D%97%E7%9A%84%E8%BF%87%E6%BB%A4%E5%99%A8%E5%87%BA%E9%94%99/","title":"发现 org2blog 发布时调用 doom-emacs 里 chinese 模块的过滤器出错"},{"content":"在论坛上看到好几位大神推荐 TabNine，说这是一个会深度学习的补全工具。在 doom-emacs 里简单的用 (package! company-tabnine)倒是安装上了，然后按照说明把 TabNine 加入到 backends 里：\n1 (add-to-list \u0026#39;company-backends #\u0026#39;company-tabnine) 重启 emacs 后执行 M-x company-tabnine-install-binary 安装 TabNine 服务程序，然后应该就可以啦。　可是、但是、可但是，无效！　查看变量 company-backends 的值，发现是(company-capf company-yasnippet company-tabnine)，这样把 tabnine 放在了最后，只要前面两个插件能够输出结果，tabnine 就永远不会出结果，至于为什么 company-tabnine 被排在了最后，目前不清楚 doom-emacs 是怎么个逻辑。不知道该怎么设置了，去 doom-emacs 的 discord 讨论组搜索看看，发现可以用 set-company-backend!进行设置，于是尝试配置如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 (def-package! company-tabnine :when (featurep! :completion company) :config (set-company-backend! \u0026#39;(c-mode c++-mode java-mode haskell-mode emacs-lisp-mode lisp-mode sh-mode perl-mode php-mode python-mode go-mode ruby-mode rust-mode js-mode css-mode web-mode org-mode) \u0026#39;(company-tabnine)) ;; Trigger completion immediately. ;; (setq company-idle-delay 0) ;; Number the candidates (use M-1, M-2 etc to select completions). (setq company-show-numbers t) ;; Use the tab-and-go frontend. ;; Allows TAB to select and complete at the same time. (company-tng-configure-default) (setq company-frontends \u0026#39;(company-tng-frontend company-pseudo-tooltip-frontend company-echo-metadata-frontend)) ) 重启 emacs，查看 company-backends，果然把 company-tabnine 排在第一位，打开一个示例文件测试，成功！另外还可以把\u0026rsquo;(company-tabnine)加上其他的补全插件，让多个插件共同起作用，如改成\u0026rsquo;(company-tabnine company-yasnippet)，这样配置则更灵活。\n**8 月 20 日更新：** 经过研究 doom-emacs 代码，发现进行如下设置更简单：\n1 2 (set-company-backend! \u0026#39;prog-mode \u0026#39;company-tabnine \u0026#39;company-capf \u0026#39;company-yasnippet) 如果启用 lsp-mode，那再进行如下设置，即可同时使用 company-lsp 和 company-tabnine 进行补全：\n1 (setq +lsp-company-backend \u0026#39;(company-lsp :with company-tabnine :separate)) ","date":"2019-08-01T00:00:00Z","permalink":"https://sunyour.org/post/%E7%BB%88%E4%BA%8E%E5%9C%A8-doom-emacs-%E4%B8%8B%E6%88%90%E5%8A%9F%E6%90%9E%E5%AE%9A%E4%BA%86-tabnine/","title":"终于在 doom-emacs 下成功搞定了 TabNine"},{"content":"这两天正在学习 python，今天学到测试部分，就想在 emacs 里写个测试用例试一下。结果写完测试用例在终端里执行没问题，到 emacs 里执行却发现报错，错误也很奇怪，显示的是\nfile-remote-p: Wrong type argument: stringp, nil\n以前碰到这种问题几乎除了上 google 搜，几乎是没什么办法，今天也是开始 google，结果搜索了一晚上也没个结果，用出错信息搜索出的结果貌似都跟这个没什么关系，很是发愁。\n实在是没什么办法了，突然想到论坛上大佬们写的插件别人用着出问题时，大佬们通常都让抓个报错信息参考下。也就想试一试，反正也是没其它办法，死马当活马医呗。\n执行 M-x toggle-debug-on-err，然后再操作一次，果然出错，然后输出一堆错误信息，貌似是从发起指令开始，一直到出错位置，所有的调用信息都有，慢慢从后往前看。竟然真的发现一点端倪，发现 file-remote-p 接收到 nil 参数是因为之前调用的函数里给传的是 project-root 变量，而 project-root 变量在这里是 nil，再继续看，发现如果 project-root 是从 projectile-project-root 赋值来的，而 projectile-project-root 怎么来呢？\n不懂问 google，继续搜索，终于在一篇介绍 projectile 的文章里发现，在项目根目录里建一个空的.projectile 文件，即可让 projectile 认为当前目录为项目根目录，马上着手 touch 一个。再执行，成功！\n我去，原来这么简单。导致出现问题的原因 python-pytest 包调用了 projectile 包，而 projectile 包的所有操作都是基于有 project-root 的前提下，所以设定当前项目根目录是非常必要的。解决手段虽然简单，可也让自己多了解了一点 projectile 的相关知识，也是一大收获啊。至此对 emacs 的兴趣又加深了几分。\n","date":"2019-07-09T00:00:00Z","permalink":"https://sunyour.org/post/%E7%BB%88%E4%BA%8E%E7%8B%AC%E7%AB%8B%E8%A7%A3%E5%86%B3%E4%BA%86%E4%B8%80%E4%B8%AA-emacs-%E7%9A%84%E9%97%AE%E9%A2%98/","title":"终于独立解决了一个 emacs 的问题"},{"content":"昨天写了一篇 Mac 上为 doom-emacs 安装 irone-server 的详细步骤，随着后来对配置的逐渐了解，发现不用那么麻烦，只要把环境变量设置好就可以成功编译。首先安装好 cmake 和 llvm（llvm 非常大，且要编译，时间非常长，耐心等候^_^）：\n1 brew install cmake llvm 在 doom-emacs 里执行 M-x irony-install-server，会提示执行命令（各有路径有所区别）：\n1 2 3 cmake -DCMAKE_INSTALL_PREFIX=/Users/yaohui/.emacs.d.doom/.local/etc/irony-server/ /Users/yaohui/.emacs.d.doom/.local/packages/elpa/irony-20190703.1732/server \u0026amp;\u0026amp; cmake --build . --use-stderr --config Release --target install 我们在 cmake 后面加上环境变量\n1 2 3 4 -DCMAKE_PREFIX_PATH=/usr/local/opt/llvm -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON -DLIBCLANG_INCLUDE_DIR=/usr/local/opt/llvm/include -DLIBCLANG_LIBRARY=/usr/local/opt/llvm/lib/libclang.dylib 完成后的编译命令为：\n1 2 3 4 5 6 7 cmake -DCMAKE_INSTALL_PREFIX=/Users/yaohui/.emacs.d.doom/.local/etc/irony-server/ -DCMAKE_PREFIX_PATH=/usr/local/opt/llvm -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON -DLIBCLANG_INCLUDE_DIR=/usr/local/opt/llvm/include -DLIBCLANG_LIBRARY=/usr/local/opt/llvm/lib/libclang.dylib /Users/yaohui/.emacs.d.doom/.local/packages/elpa/irony-20190703.1732/server \u0026amp;\u0026amp; cmake --build . --use-stderr --config Release --target install 即可正常编译。\n另外，也可以用 xcode 的 libclang.dylib，编译命令为：\n1 2 3 4 5 6 cmake -DCMAKE_INSTALL_PREFIX=/Users/yaohui/.emacs.d.doom/.local/etc/irony-server/ -DCMAKE_PREFIX_PATH=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/ -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON -DLIBCLANG_INCLUDE_DIR=/usr/local/opt/llvm/include -DLIBCLANG_LIBRARY=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib /Users/yaohui/.emacs.d.doom/.local/packages/elpa/irony-20190703.1732/server \u0026amp;\u0026amp; cmake --build . --use-stderr --config Release --target install **注意：这里为了展示效果，把命令进行了换行，在实际执行时要在一行内。**\n","date":"2019-07-07T00:00:00Z","permalink":"https://sunyour.org/post/mac-%E4%B8%8A%E5%AE%89%E8%A3%85-irony-server-%E6%AD%A5%E9%AA%A4%E4%BA%8C/","title":"Mac 上安装 irony-server 步骤二"},{"content":"用了半天时间把 Emacs 从 spacemacs 迁移到了 doom-emacs，严格的说，应该是复制，现在两个配置可以随时切换，以进行比较，此文是在 doom-emacs 上编辑发布，以资纪念。\n","date":"2019-07-06T08:21:00+08:00","permalink":"https://sunyour.org/post/%E4%BB%8Espacemacs%E8%BF%81%E7%A7%BB%E5%88%B0doom-emacs/","title":"从spacemacs迁移到doom-emacs"},{"content":"Mac 上的 doom-emacs 不能直接通过 M-x irony-install-server 成功安装 irony-server，需要手工安装，下面把详细步骤纪录下来，以备后来查询。\n下载 llvm 预编译软件包 1 2 cd /tmp wget http://releases.llvm.org/8.0.0/clang+llvm-8.0.0-x86_64-apple-darwin.tar.xz 解压到临时目录（如/tmp） 1 2 cd /tmp x clang+llvm-8.0.0-x86_64-apple-darwin.tar.xz 准备编译环境 1 2 3 4 5 brew install cmake cd /tmp git clone https://github.com/Sarcasm/irony-mode irony-mode mkdir irony-mode/server/build pushd irony-mode/server/build 开始编译 1 2 3 4 DEST=\u0026#34;$HOME/.emacs.d/.local/etc/irony-server/\u0026#34; cmake -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON -DCMAKE_INSTALL_PREFIX=\u0026#34;$DEST\u0026#34; -DCMAKE_PREFIX_PATH=/tmp/clang+llvm-8.0.0-x86_64-apple-darwin ../ cmake --build . --use-stderr --config Release --target install install_name_tool -change @rpath/libclang.dylib /usr/local/opt/llvm/lib/libclang.dylib \u0026#34;$DEST/bin/irony-server\u0026#34; 清理 1 2 3 popd rm -rf irony-mode rm -rf clang+llvm-8.0.0-x86_64-apple-darwin ","date":"2019-07-06T00:00:00Z","permalink":"https://sunyour.org/post/%E5%9C%A8-mac-%E4%B8%8A-doom-emacs-%E5%AE%89%E8%A3%85-irony-server-%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/","title":"在 Mac 上 doom-emacs 安装 irony-server 详细步骤"},{"content":"今天终于抽着空在白天跑去看《黑衣人：全球追缉》，结果看一半就恶心的想吐， 什么烂片，一点情节也没有，仅有的一点点特效也就比五毛多一点，再一次对进口 电影失望透顶。希望国产电影越来越好。\n","date":"2019-06-21T00:00:00Z","permalink":"https://sunyour.org/post/%E4%B8%87%E5%88%86%E6%9C%9F%E5%BE%85%E7%9A%84%E9%BB%91%E8%A1%A3%E4%BA%BA%E7%AB%9F%E6%98%AF%E4%B8%87%E5%88%86%E5%A4%B1%E6%9C%9B/","title":"万分期待的《黑衣人》竟是万分失望"},{"content":"我就想说一句，看着咋这么吓人？\n每日时间 星期一 星期二 星期三 星期四 星期五 星期六 星期日 07:00-07:30 起床 起床 起床 起床 起床 起床 起床 07:30-08:00 早餐 早餐 早餐 早餐 早餐 早餐 早餐 08:00-08:30 识字 识字 拼音 识字 识字 拼音 出发 08:30-09:00 送园 送园 送园 送园 送园 休 篮球课 09:00-10:00 幼儿园 幼儿园 幼儿园 幼儿园 幼儿园 休 篮球课 10:00-12:00 幼儿园 幼儿园 幼儿园 幼儿园 幼儿园 休 休 12:00-13:30 幼儿园 幼儿园 幼儿园 幼儿园 幼儿园 午餐 午餐 13:30-16:45 幼儿园 幼儿园 幼儿园 幼儿园 幼儿园 休 玩轮滑 16:45-17:00 接园 接园 接园 接园 接园 休 休 17:00-17:30 蓝球 跳绳 休 蓝球 跳绳 晚餐 晚餐 17:30-20:00 美术课 轮滑课 武术课 围棋课 英语课 休 英语课 20:00-21:00 休 围棋 英语网课 休 围棋 休 围棋 21:00-21:15 洗漱 洗漱 洗漱 洗漱 洗漱 洗漱 洗漱 21:15-21:30 英语 英语 英语 英语 英语 英语 英语 21:30-21:45 讲绘本 讲绘本 讲绘本 讲绘本 讲绘本 讲绘本 讲绘本 21:45-22:00 听故事 听故事 听故事 听故事 听故事 听故事 听故事 22:00-07:00 睡觉 睡觉 睡觉 睡觉 睡觉 睡觉 睡觉 注：“休”为自由活动时间，其它时间完成指定任务即可自由活动。\n","date":"2019-06-16T22:06:00+08:00","permalink":"https://sunyour.org/post/%E5%A2%A9%E5%A2%A9%E7%9A%84%E4%BD%9C%E6%81%AF%E6%97%A5%E7%A8%8B%E8%A1%A8/","title":"墩墩的作息日程表"},{"content":"一个是xuchunyang/grab-mac-link.el: Grab link from Mac Apps and insert it into Emacs 另一个是org-mac-link.el – Grab links from open Mac applications Spacemacs 里集成的是 org-mac-link.el Entered on [2019-06-16 日 15:42]\n","date":"2019-06-16T00:00:00Z","permalink":"https://sunyour.org/post/%E4%B8%A4%E4%B8%AA%E5%8F%AF%E4%BB%A5%E6%8A%8A-mac-%E4%B8%8B%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%93%BE%E6%8E%A5%E6%8F%92%E5%85%A5%E5%BD%93%E5%89%8D%E4%BD%8D%E7%BD%AE%E7%9A%84%E6%8F%92%E4%BB%B6/","title":"两个可以把 Mac 下应用程序的链接插入当前位置的插件："},{"content":"今天带孩子去看儿童剧，因为只有一张成人票，后来让他妈妈带着他进去，我在外面等着，左右无聊，干脆在旁边的快餐店点了一杯可乐等，手机晚上没充电，现在只有 9%了，只好改成省电模式装兜里，一边喝着可乐，一边看着窗外。突然地，感觉也挺好的，可能是长期紧绷的弦终于有机会放松一下了（虽然是不自觉的），这感觉，很舒服。\n","date":"2016-05-08T15:30:00+08:00","permalink":"https://sunyour.org/post/%E5%81%B6%E5%B0%94%E5%AE%89%E9%9D%99%E4%B8%80%E4%B8%8B%E4%B9%9F%E6%8C%BA%E5%A5%BD/","title":"偶尔安静一下也挺好"},{"content":"新办公室有块空地，几个人商量了一下，决定留下这块地，让家人有兴趣可以种点东西。回家跟孩他妈一提，也是兴奋的不行，本来她也在琢磨着的块地可以种点东西，正到处看地呢，这下倒也省了。\n前两天从老家回来，决定带孩子去看看那块地，顺便整一下，也已经到了要下苗的季节了，再不整一整就来不及了。\n下午 3 点，一家人浩浩荡荡的出发了，刚出地库 5 分钟，发现儿子在安全座椅上睡着了，也是奇了，儿子只要坐在安全座椅上，马上就能睡着，可能是车子多多少少的晃动的原因吧。半小时后，到达目的地，还没醒，大人看看地很满意，没想到前一天哥们儿一家已经把地全整过了，肥都埋了。得，又偷一把懒，等半个月一起开种。\n回家吧，儿子还没醒，舍不得叫他，多睡会儿挺好，结果马上要到家了，正要进地库的时候，儿子醒了。\n精彩的时刻来了：儿子茫然的看着地库入口，一脸懵圈的表情说：为啥我们刚出车库就又进来呢？一家子顿时笑的不行，停都停不下来了，哈哈哈哈 ^_^\n","date":"2016-04-07T15:41:00+08:00","permalink":"https://sunyour.org/post/%E5%B8%A6%E5%84%BF%E5%AD%90%E5%A4%96%E5%87%BA%E7%9A%84%E8%B6%A3%E4%BA%8B/","title":"带儿子外出的趣事"},{"content":"终于把 MBP 上的 Windows 删了，现在几乎所有工作都可以在 Mac 下完成，除了一样：网上银行。无奈再装个虚拟机好了，而在试验工行登录时，无意中发现有提示信息，有 Mac 下的 UsbKey 工具，转而登录中行时，竟也发现有 Mac 版 UsbKey 工具，赶紧安装上试验下，结果是：完全没问题！！！这下最后一点保留 Windows 的理由也没有了。这个世界终于清静了……\n","date":"2016-03-30T18:26:00+08:00","permalink":"https://sunyour.org/post/%E5%B7%A5%E8%A1%8C%E5%92%8C%E4%B8%AD%E8%A1%8C%E7%BD%91%E9%93%B6%E5%85%A8%E9%83%A8%E9%A1%BA%E5%88%A9%E6%94%AF%E6%8C%81mac%E5%B9%B3%E5%8F%B0/","title":"工行和中行网银全部顺利支持Mac平台"},{"content":"如何能正确把中文导出成 PDF {#如何能正确把中文导出成 pdf} 网上看了很多资料，最后发现最有效的解决办法竟然也是最简单的，根本不需要复杂配置，主要包括三个部分：\n安装 LaTeX 应用程序 {#安装 latex 应用程序} 我的电脑是 Mac，直接安装 MacTeX，就是有点大，安装包要 2.68G，听说 BasicTeX 要小的多，不知道能不能用，有兴趣的同学可以试试。\n另外，如果系统是最新版的 OSX 10.11，那安装完 MacTeX 后一定要 update 到最新版，最主要解决的是在 OSX 10.11 下不能在/usr 目录下建 texbin 目录的问题，最新版会在/Library/Support 目录下也建一个 texbin 目录的符号链接，并加入到 PATH 环境变量中，供读取。\n调用 CTeX 宏包 {#调用 ctex 宏包} CTeX 是专为处理中文而定制的宏包，能够根据不同平台自动调用相应的中文字体，达到正常转换的目的。添加方法是在 org 文件头增加如下代码：\n1 #+LATEX_HEADER: \\usepackage[UTF8]{ctex} 使用 XeLaTeX 程序进行编译转换 {#使用 xelatex 程序进行编译转换} 有两个方法，一是在 org 文件头进行指定，如下：\n1 #+LATEX_CMD: xelatex 如果不想每次都在 org 文件头指定，可以在 Emacs 配置文件中进行如下设定：\n1 2 (setq org-latex-pdf-process \u0026#39;(\u0026#34;xelatex -interaction nonstopmode %f\u0026#34; \u0026#34;xelatex -interaction nonstopmode %f\u0026#34;)) 示例 本文按此方法生成的 PDF 文件在此：emacs-org-to-pdf-with-latex.pdf\n","date":"2016-03-27T00:00:00+08:00","permalink":"https://sunyour.org/post/emacs-org-to-pdf-with-latex%E8%AE%BE%E7%BD%AE/","title":"Emacs org to pdf (with LaTeX)设置"},{"content":"首先是一个调用脚本，循环读取文本文件\n文本文件格式为：ip loginuser loginpass passuser newpass\n1 2 3 4 5 6 7 8 9 10 11 12 #!/bin/bash if [ \u0026#34;$1\u0026#34; = \u0026#34;\u0026#34; ] || [ \u0026#34;$1\u0026#34; = \u0026#34;-h\u0026#34; ] || [ \u0026#34;$1\u0026#34; = \u0026#34;--help\u0026#34; ] then echo \u0026#34;Usage: chpasswd.sh path/iplist \u0026#34; exit fi cat $1 | while read line do [ -z \u0026#34;$line\u0026#34; ] \u0026amp;\u0026amp; continue expect ~/expect/chpasswd.expect $line; done echo -e \u0026#34;\\n well done\\n\u0026#34; 以下是 expect 主程序\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #!/usr/bin/expect #登录的用户名 set loginuser [lindex $argv 1] #密码 set loginpass [lindex $argv 2] #要修改的用户名 set passuser [lindex $argv 3] #要修改成的新密码 set newpass [lindex $argv 4] set ipaddr [lindex $argv 0] set timeout 300 set cmd_prompt \u0026#34;]#|~]?\u0026#34; #---------------------------------------------------通过 ssh 登录 spawn ssh $loginuser@$ipaddr set timeout 300 expect { -re \u0026#34;Are you sure you want to continue connecting (yes/no)?\u0026#34; { send \u0026#34;yes\\r\u0026#34; } -re \u0026#34;assword:\u0026#34; { send \u0026#34;$loginpass\\r\u0026#34; } -re \u0026#34;Permission denied, please try again.\u0026#34; { exit } -re \u0026#34;Connection refused\u0026#34; { exit } -re $cmd_prompt { send \u0026#34;\\r\u0026#34; } timeout { exit } eof { exit } } #-------------------------------------------修改密码 send \u0026#34;sudo passwd $passuser \\r\u0026#34;; expect { \u0026#34;password for $loginuser:\u0026#34; { send \u0026#34;$loginpass\\r\u0026#34; } } expect { \u0026#34;New password:\u0026#34; { send \u0026#34;$newpass\\r\u0026#34; } \u0026#34;新的 密码：\u0026#34; { send \u0026#34;$newpass\\r\u0026#34; } \u0026#34;passwd: Only root can specify a user name.\u0026#34; { exit } } expect { \u0026#34;Retype new password:\u0026#34; { send \u0026#34;$newpass\\r\u0026#34; } \u0026#34;重新输入新的 密码：\u0026#34; { send \u0026#34;$newpass\\r\u0026#34; } } #---------------------------------------------退出 expect -re $cmd_prompt exit ","date":"2016-03-23T22:55:00+08:00","permalink":"https://sunyour.org/post/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B-linux-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/","title":"批量修改远程 Linux 服务器用户密码"},{"content":"再一次实际操作了一下服务器，真实感受到服务器数量多了以后维护的麻烦，看来确实需要批量维护工具。只不过，最终用哪个，这是个问题。Puppet 和 Chef 好用的都是商业版，不考虑。Ansible 和 SaltStack 用哪个，确实很纠结，只有两个都接触接触看了。\n","date":"2016-03-23T09:38:00+08:00","permalink":"https://sunyour.org/post/ansible%E8%BF%98%E6%98%AFsaltstack%E8%BF%99%E6%98%AF%E4%B8%AA%E9%97%AE%E9%A2%98/","title":"Ansible还是SaltStack，这是个问题"},{"content":"今天从早教班上完课回来，由于墩墩表现大赞，心情非常好。妈妈在厨房给墩墩切梨块，我担心他万一让厨房用具伤到，就叫他让他出来，没想到墩墩就跟没听到一样，结合以前也经常有类似的情况，当孩子的注意力在他感兴趣的事时，别人叫他基本就是无视。今天突然感觉到这样下去可能会成为一种很不好的行为，于是决定对他进行批评。\n首先是重复几次叫他名字，仍然被无视。这时妈妈也提醒到爸爸在叫他，但完全没有任何反应，眼睛只盯着梨块。这时妈妈切好梨块，准备递给他。我果断拦住，然后以质问的语气问孩子：“爸爸叫你听到没有？”，结果是仍然没任何反应，只想上手去拿梨块，坚决制止之。这时孩子开始大喊大叫，再次制止他拿梨块，孩子开始大哭，妈妈已经不忍心了，想把梨块递给孩子，再次坚决制止。反复几次，孩子哭的不停，终于在妈妈抱起来的时候哭着答应了一声“哎～～”，妈妈立刻把梨块给了孩子，我也不再板着脸，对孩子相对温柔的表达了“在别人叫你时，如果不答应是不礼貌的行为，会没有朋友”的意思，然后做自己的事。\n没想到的是，吃完梨块以后，墩墩主动过来向我示好，真的是受宠若惊，以前从来没有这样过，想起吃午饭时孩子主动从远处把玉米拿过来喂给我，真是眼泪都要掉下来了。赶紧专心致志地陪墩墩玩了两个多小时。孩子看起来也非常开心，完全没有受批评后可能的负面反应。\n感触：批评孩子要有度，之前都是很粗暴的吼孩子，发现结果是孩子明显和自己疏远了，而且胆子变得很小，想玩什么都会提前看家长。今天晚上的批评教育感觉上是恰到好处，既达到批评的目的，又没有别的负作用。\n","date":"2015-09-04T00:00:00Z","permalink":"https://sunyour.org/post/%E5%AF%B9%E5%A2%A9%E5%A2%A9%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%AD%A3%E5%BC%8F%E6%89%B9%E8%AF%84%E6%95%99%E8%82%B2/","title":"对墩墩的第一次正式批评教育"},{"content":"最后是在客厅哄着了才抱进去的，开始还没睡实，往床上放的时候醒了，哭的哗哗的，死活不进屋，最后又在客厅哄着才行。这几天情况都不对劲，不知道为什么。\n","date":"2015-09-03T00:00:00Z","permalink":"https://sunyour.org/post/%E8%BF%9E%E7%BB%AD%E4%B8%A4%E5%A4%A9%E4%BA%86%E5%A2%A9%E5%A2%A9%E5%8D%8A%E5%A4%9C12%E7%82%B9%E4%BB%8D%E7%84%B6%E4%B8%8D%E6%84%BF%E6%84%8F%E5%9B%9E%E5%B1%8B%E7%9D%A1%E8%A7%89/","title":"连续两天了，墩墩半夜12点仍然不愿意回屋睡觉"},{"content":"在同班孩子中表现中上（当然也可能是个人感觉），身高到 93cm 了，体重 14.375kg，要给儿子好好过 2 周岁生日:)\n","date":"2015-09-02T00:00:00Z","permalink":"https://sunyour.org/post/%E5%A2%A9%E5%A2%A9%E5%BF%AB2%E5%B2%81%E4%BA%86%E6%97%A9%E6%95%99%E7%8F%AD%E5%8D%87%E7%8F%AD%E4%B8%A4%E5%91%A8%E7%8A%B6%E6%80%81%E4%B8%8D%E9%94%99/","title":"墩墩快2岁了，早教班升班两周，状态不错"}]