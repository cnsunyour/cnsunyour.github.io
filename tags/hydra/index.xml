<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hydra on 凡·记</title><link>https://sunyour.org/tags/hydra/</link><description>Recent content in hydra on 凡·记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 11 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://sunyour.org/tags/hydra/index.xml" rel="self" type="application/rss+xml"/><item><title>如何判断 Emacs 当前处于 Hydra 模式</title><link>https://sunyour.org/post/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD-emacs-%E5%BD%93%E5%89%8D%E5%A4%84%E4%BA%8E-hydra-%E6%A8%A1%E5%BC%8F/</link><pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate><guid>https://sunyour.org/post/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD-emacs-%E5%BD%93%E5%89%8D%E5%A4%84%E4%BA%8E-hydra-%E6%A8%A1%E5%BC%8F/</guid><description>&lt;p>在 pyim/emacs-rime 里都有“探针/断言”函数来在特定的状态下自动切换到英文状态，省去手工切换的动作。&lt;/p>
&lt;p>但是我在使用中偶然发现在打开 Hydra 菜单的时候不能自动切换到英文模式，有点儿影响体验。我一直以为 Hydra 激活时是一个 &amp;ldquo;button&amp;rdquo; 模式，看来不是这样。&lt;/p>
&lt;p>试图搜索一下与 hydra 有关的 mode ，却一无所获，莫非 hydra 不是以一种特定 mode 的方式来实现的？查看官方文档和 google 搜索也都没有找到类似有一个单独的 mode 的描述，只是说明 defhydra 里会定义一些快捷键。但是注意到一个情况，就是 defhydra 会生成一个 keymap ，可是怎么使得这个 keymap 在需要的时候激活，不需要的时候关闭呢？&lt;/p>
&lt;p>无奈英语太烂，实在找不到更详细的信息了，只好去查看代码，终于发现一个函数 &lt;code>hydra-set-transient-map&lt;/code> ，它的说明是 &lt;code>Set KEYMAP to the highest priority.&lt;/code> 也就 是把需要的 hydra 的 keymap 优先级提到最高，这样其对应的快捷键就生效了，退出时再 恢复到低级。这下明白了hydra 的实现方式。可是如何判断当前把 hydra keymap 提高到最 高优先级使得快捷键生效了呢？&lt;/p>
&lt;p>只好继续看代码，在逐个搜索函数和变量的过程中，终于发现一个变量 &lt;code>hydra-curr-map&lt;/code> ，其当前值是 nil ，描述是 &lt;code>The keymap of the current Hydra called.&lt;/code> ，可以试一下。&lt;/p>
&lt;p>试着写一个断言函数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">defun&lt;/span> &lt;span class="nv">+rime-predicate-hydra-p&lt;/span> &lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">and&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">featurep&lt;/span> &lt;span class="ss">&amp;#39;hydra&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nv">bound-and-true-p&lt;/span> &lt;span class="nv">hydra-curr-map&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>加载到 &lt;code>rime-disable-predicates&lt;/code> 里试一下，果然有用。 ^_^&lt;/p>
&lt;p>找到这个的过程好费劲，各种搜索无果，在群里多次提问也没有回答，不知是这问题太基础还是大家确实都不知道，加上看到找到的这个变量，感觉应该挺容易发现才对，现在自信心挺受打击，总觉得自己绕了很多弯路。&lt;/p>
&lt;p>因此就假定也会有同学有我同样的情况吧，所以记录一下备查，也许有人用得着。&lt;/p></description></item></channel></rss>