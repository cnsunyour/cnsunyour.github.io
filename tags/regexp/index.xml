<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>regexp on 凡·记</title><link>https://sunyour.org/tags/regexp/</link><description>Recent content in regexp on 凡·记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 26 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://sunyour.org/tags/regexp/index.xml" rel="self" type="application/rss+xml"/><item><title>正则表达式中?=和?:和?!的理解</title><link>https://sunyour.org/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E5%92%8C%E5%92%8C%E7%9A%84%E7%90%86%E8%A7%A3/</link><pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate><guid>https://sunyour.org/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E5%92%8C%E5%92%8C%E7%9A%84%E7%90%86%E8%A7%A3/</guid><description>&lt;p>今天查看 beancount 的配置，总觉得配置写的有点笨，稍微优化了一点点。其中把.bean 和.beancount 文件都映射到 beancount-mode，之前是用两条语句完成，应该用正则表达式`&amp;quot;\\.bean\\(count\)\\&amp;rsquo;&amp;quot;`一行语句就设置完成就好。可能是习惯使然，顺便查了一下 auto-mode-alist 的值，竟然发现里面的值都是类似`&amp;quot;\\.bean\\(?:count\)\\&amp;rsquo;&amp;quot;`的形式，里面多了一个`?:`，不知是什么作用。祭出 google 大法后，才明白`?:`的作用。&lt;/p>
&lt;p>要理解?=和?!，首先需要理解前瞻，后顾，负前瞻，负后顾四个概念：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// 前瞻：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">exp1(?=exp2) 查找exp2前面的exp1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 后顾：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(?&amp;lt;=exp2)exp1 查找exp2后面的exp1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 负前瞻：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">exp1(?!exp2) 查找后面不是exp2的exp1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 负后顾：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(?&amp;lt;!exp2)exp1 查找前面不是exp2的exp1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>举例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;#34;中国人&amp;#34;.replace(/(?&amp;lt;=中国)人/, &amp;#34;rr&amp;#34;) // 匹配中国人中的人，将其替换为rr，结果为 中国rr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;法国人&amp;#34;.replace(/(?&amp;lt;=中国)人/, &amp;#34;rr&amp;#34;) // 结果为 法国人，因为人前面不是中国，所以无法匹配到
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>要理解?:则需要理解捕获分组和非捕获分组的概念：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">()表示捕获分组，()会把每个分组里的匹配的值保存起来，使用$n(n是一个数字，表示第n个捕获组的内容)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(?:)表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>举例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// 数字格式化 1,123,000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;1234567890&amp;#34;.replace(/\B(?=(?:\d{3})+(?!\d))/g,&amp;#34;,&amp;#34;) // 结果：1,234,567,890，匹配的是后面是3*n个数字的非单词边界(\B)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>之前一直觉得自己对正则表达式已经掌握的不错了，现在看来还是远远不够，学无止尽啊！&lt;/p></description></item></channel></rss>